version: 2.1


executors:
  builder:
    docker:
      - image: omisegoimages/ewallet-builder:stable
    working_directory: ~/src
    environment:
      IMAGE_NAME: "omisego/ewallet"


commands:
  notify_slack_failure:
    description: "Notify Slack only on failure"
    steps:
      - run:
          name: Notify Slack on failure
          command: |
            GH_URL="https://github.com/omisego/ewallet/tree/${CIRCLE_BRANCH}"
            CIRCLE_URL="https://circleci.com/gh/omisego/ewallet/${CIRCLE_BUILD_NUM}"
            WORKFLOW_URL="https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
            MESSAGE="omisego/ewallet branch ${CIRCLE_BRANCH} has failed during ${CIRCLE_JOB}"
            RICH_MESSAGE="*omisego/ewallet* branch *${CIRCLE_BRANCH}* has failed during ${CIRCLE_JOB}"

            curl -X POST -H 'Content-Type: application/json' --data "{ \
              \"attachments\": [ \
                { \
                  \"fallback\": \"${MESSAGE}\", \
                  \"text\": \":no_good: ${RICH_MESSAGE}\", \
                  \"mrkdwn\": true, \
                  \"color\": \"#ed2c5c\", \
                  \"fields\": [ \
                    { \
                      \"title\": \"Branch\", \
                      \"value\": \"<$GH_URL|$CIRCLE_BRANCH>\", \
                      \"short\": true \
                    }, { \
                      \"title\": \"Build\", \
                      \"value\": \"<$CIRCLE_URL|$CIRCLE_BUILD_NUM>\", \
                      \"short\": true \
                    } \
                  ] \
                } \
              ] \
            }" ${SLACK_WEBHOOK}
          when: on_fail

  notify_slack:
    description: "Notify Slack"
    steps:
      - run:
          name: Notify Slack
          command: |
            GH_URL="https://github.com/omisego/ewallet/tree/${CIRCLE_BRANCH}"
            CIRCLE_URL="https://circleci.com/gh/omisego/ewallet/${CIRCLE_BUILD_NUM}"
            WORKFLOW_URL="https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
            MESSAGE="omisego/ewallet branch ${CIRCLE_BRANCH} has been successfully built"
            RICH_MESSAGE="*omisego/ewallet* branch *${CIRCLE_BRANCH}* has been successfully built"

            curl -X POST -H 'Content-Type: application/json' --data "{ \
              \"attachments\": [ \
                { \
                  \"fallback\": \"${MESSAGE}\", \
                  \"text\": \":white_check_mark: ${RICH_MESSAGE}\", \
                  \"mrkdwn\": true, \
                  \"color\": \"#1cbf43\", \
                  \"fields\": [ \
                    { \
                      \"title\": \"Branch\", \
                      \"value\": \"<$GH_URL|$CIRCLE_BRANCH>\", \
                      \"short\": true \
                    }, { \
                      \"title\": \"Build\", \
                      \"value\": \"<$CIRCLE_URL|$CIRCLE_BUILD_NUM>\", \
                      \"short\": true \
                    } \
                  ] \
                } \
              ] \
            }" ${SLACK_WEBHOOK}

  setup_ewallet_workspace:
    description: "Setup eWallet workspace"
    steps:
      - attach_workspace:
          name: Attaching workspace
          at: ~/


jobs:
  build_test:
    executor: builder
    steps:
      - checkout
      - restore_cache:
          name: Restoring eWallet artifacts from cache
          keys:
            - v1-ewallet-{{ checksum "mix.lock" }}-{{ checksum "mix.exs" }}-{{ checksum "apps/admin_panel/assets/yarn.lock" }}
            - v1-ewallet-{{ checksum "mix.lock" }}-{{ checksum "mix.exs" }}-
            - v1-ewallet-{{ checksum "mix.lock" }}-
            - v1-ewallet-
      - run:
          name: Building eWallet in test environment
          command: |
            set -xe
            # * Clean bcrypt_elixir to avoid NIF issue due to broken cache.
            # * Clean mime in order to make the new type recognized by mime app.
            #   See also admin_api/config/config.exs
            mix deps.clean bcrypt_elixir mime --build
            make build-test
      - run:
          name: Building eWallet assets
          command: |
            set -xe
            make deps-assets
      - save_cache:
          name: Caching eWallet artifacts
          key: v1-ewallet-{{ checksum "mix.lock" }}-{{ checksum "mix.exs" }}-{{ checksum "apps/admin_panel/assets/yarn.lock" }}
          paths:
            - deps
            - _build/test
            - apps/admin_panel/assets/node_modules
      - persist_to_workspace:
          name: Persisting workspace
          root: ~/
          paths:
            - src/deps
            - src/_build
            - src/apps/admin_panel/assets/node_modules
      - notify_slack_failure

  lint:
    executor: builder
    steps:
      - checkout
      - setup_ewallet_workspace
      - run:
          name: Checking code formattings
          command: |
            set +xe
            make check-format
      - run:
          name: Checking credo
          command: |
            set -xe
            make check-credo
          environment:
            MIX_ENV: test
      - notify_slack_failure

  dialyze:
    executor: builder
    steps:
      - checkout
      - setup_ewallet_workspace
      - run:
          name: Determining runtime versions
          command: |
            set -xe
            mkdir -p ~/var
            elixir --version > ~/var/elixir-version
      - restore_cache:
          name: Restoring runtime PLT from cache
          keys:
            - v1-ewallet-plt-{{ checksum "~/var/elixir-version" }}-{{ checksum "mix.lock" }}
            - v1-ewallet-plt-{{ checksum "~/var/elixir-version" }}-
            - v1-ewallet-plt-
      - run:
          name: Checking dialyzer
          command: |
            set -xe
            export PLT_CORE_PATH=$HOME/var/dialyzer
            mkdir -p $PLT_CORE_PATH
            make check-dialyzer
          environment:
            MIX_ENV: test
      - save_cache:
          name: Caching runtime PLT
          key: v1-ewallet-plt-{{ checksum "~/var/elixir-version" }}-{{ checksum "mix.lock" }}
          paths:
            - ~/var/dialyzer
          when: always
      ## We're silenting dialyzer failure until we've fixed all dialyzer offense.
      ## TODO: enable this once Dialyzer is fixed.
      # - notify_slack_failure

  test:
    executor: builder
    docker:
      - image: omisegoimages/ewallet-builder:stable
      - image: postgres:9.6-alpine
    steps:
      - checkout
      - setup_ewallet_workspace
      - run:
          name: Running eWallet tests
          command: |
            set -xe
            make test-ewallet
          environment:
            DATABASE_URL: postgresql://postgres:@localhost:5432/ewallet
            LOCAL_LEDGER_DATABASE_URL: postgresql://postgres:@localhost:5432/ledger
            USE_JUNIT: 1
            MIX_ENV: test
      - run:
          name: Running eWallet assets tests
          command: |
            set -xe
            make test-assets
      - notify_slack_failure

  report:
    executor: builder
    steps:
      - notify_slack

  build:
    executor: builder
    steps:
      - checkout
      - setup_remote_docker
      - setup_ewallet_workspace
      - restore_cache:
          name: Restoring eWallet production artifacts from cache
          keys:
            - v1-ewallet-prod-{{ checksum "mix.exs" }}-{{ checksum "Dockerfile" }}
            - v1-ewallet-prod-{{ checksum "mix.exs" }}-
            - v1-ewallet-prod-
      - run:
          name: Building eWallet in production environment
          command: |
            set -xe
            mix deps.clean mime --build
            make build-prod
      - run:
          name: Building eWallet Docker image
          command: |
            set -xe
            docker load -i ~/caches/docker-layers.tar || true
            make docker-build IMAGE_NAME=$IMAGE_NAME
            mkdir -p ~/caches
            docker save -o ~/caches/docker-layers.tar "$IMAGE_NAME"
      - save_cache:
          name: Caching eWallet production artifacts
          key: v1-ewallet-prod-{{ checksum "mix.exs" }}-{{ checksum "Dockerfile" }}
          paths:
            - _build/prod/.mix
            - _build/prod/consolidated
            - _build/prod/lib
            - ~/caches/docker-layers.tar
      - persist_to_workspace:
          name: Persisting workspace
          root: ~/
          paths:
            - caches/docker-layers.tar
      - notify_slack_failure

  test_e2e:
    executor: builder
    steps:
      - checkout
      - setup_remote_docker
      - setup_ewallet_workspace
      - run:
          name: Preparing E2E environments
          command: |
            set -xe

            cat \<<EOF > .env
            E2E_HTTP_HOST=http://ewallet:4000
            E2E_SOCKET_HOST=ws://ewallet:4000
            E2E_TEST_ADMIN_EMAIL=$(openssl rand -hex 4)@example.com
            E2E_TEST_ADMIN_PASSWORD=$(openssl rand -base64 24 | tr '+/' '-_')
            E2E_TEST_ADMIN_1_EMAIL=$(openssl rand -hex 4)@example.com
            E2E_TEST_ADMIN_1_PASSWORD=$(openssl rand -base64 24 | tr '+/' '-_')
            E2E_TEST_USER_EMAIL=$(openssl rand -hex 4)@example.com
            E2E_TEST_USER_PASSWORD=$(openssl rand -base64 24 | tr '+/' '-_')
            EOF

            docker load -i ~/caches/docker-layers.tar
            docker network create net0

            sh docker-gen.sh -i "$IMAGE_NAME" -n net0 -f .env > docker-compose.override.yml
            docker-compose up -d postgres mail
            docker-compose run --rm ewallet sh \<<EOF
              bin/ewallet initdb
              bin/ewallet seed -e
              bin/ewallet config base_url http://ewallet:4000
              bin/ewallet config email_adapter smtp
              bin/ewallet config smtp_host mail
              bin/ewallet config smtp_port 1025
            EOF
      - run:
          name: Configure E2E secret
          command: |
            docker-compose run --rm ewallet sh \<<EOF >/dev/null 2>&1
              bin/ewallet config aws_bucket "$AWS_BUCKET"
              bin/ewallet config aws_region "$AWS_REGION"
              bin/ewallet config aws_access_key_id "$AWS_ACCESS_KEY_ID"
              bin/ewallet config aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
              bin/ewallet config gcs_bucket "$GCS_BUCKET"
            EOF

            # Use printf/awk to unescape the string with double escaping.
            unescaped_gcs_creds="$(printf "%b" "$GCS_CREDENTIALS" | awk '{ gsub("\\\\\"", "\""); print $0 }')"
            docker-compose run --rm ewallet config gcs_credentials "$unescaped_gcs_creds" >/dev/null 2>&1
      - run:
          name: Running E2E tests
          command: |
            set -xe

            # Primary container cannot connect directly to the Docker-in-Docker instance.
            # We need to spawn another image to do so.
            git clone https://github.com/omisego/e2e.git ~/e2e
            docker create -v /src --name srcs alpine:3.8 /bin/true
            docker cp ~/e2e srcs:/src
            docker cp .env srcs:/src/e2e/.env

            docker-compose up -d ewallet
            trap "docker-compose logs ewallet" 0 1 2 3 6 14 15

            docker run --rm \
                --init \
                --network net0 \
                --volumes-from srcs \
              omisegoimages/ewallet-builder:stable \
              sh -c "cd /src/e2e && pipenv install && pipenv run robot tests"
      - notify_slack_failure

  publish:
    executor: builder
    steps:
      - setup_remote_docker
      - setup_ewallet_workspace
      - run:
          name: Logging into Docker Hub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Publishing Docker image
          command: |
            set -xe
            docker load -i ~/caches/docker-layers.tar

            IMAGE_TAG=""
            if [ -n "$CIRCLE_TAG" ]; then
                _ver="${CIRCLE_TAG#*v}"

                # Given a v1.0.0-pre.1 tag, this will generate:
                # - 1.0
                # - 1.0.0-pre
                # - 1.0.0-pre.1
                while true; do
                    case "$_ver" in
                        *.* ) IMAGE_TAG="$_ver $IMAGE_TAG"; _ver="${_ver%.*}";;
                        * )   break;;
                    esac
                done

                # In case the commit is HEAD of master branch, also tag stable.
                if [ -n "$CIRCLE_REPOSITORY_URL" ] && [ -n "$CIRCLE_SHA1" ]; then
                    _ref="refs/heads/master"
                    _head="$(git ls-remote "$CIRCLE_REPOSITORY_URL" "$_ref" | awk '{ print $1 }')"
                    if [ "$CIRCLE_SHA1" = "$_head" ]; then
                        IMAGE_TAG="stable $IMAGE_TAG"
                    fi
                fi
            elif [ "$CIRCLE_BRANCH" = "master" ]; then
                IMAGE_TAG="dev"
                IMAGE_TAG="dev-$(echo "$CIRCLE_SHA1" | head -c 8) $IMAGE_TAG"
            fi

            for tag in $IMAGE_TAG; do
                docker tag "$IMAGE_NAME" "$IMAGE_NAME:$tag"
                docker push "$IMAGE_NAME:$tag"
            done
      - notify_slack


workflows:
  test_build:
    jobs:
      - build_test
      - lint:
          requires:
            - build_test
      - test:
          requires:
            - build_test
      - dialyze:
          requires:
            - build_test

      # Non-mainline branches only
      - report:
          requires:
            - lint
            - test
          filters:
            branches:
              ignore:
                - master
                - /^v.*/
                - /\-e2e$/
            tags:
              ignore: /^v.*/

      # Mainline branches only
      - build:
          requires:
            - lint
            - test
          filters: &mainline_branches
            branches:
              only:
                - master
                - /^v.*/
                - /\-e2e$/
            tags:
              only: /^v.*/
      - test_e2e:
          requires:
            - build
          filters: *mainline_branches
      - publish:
          requires:
            - test_e2e
          filters: *mainline_branches
