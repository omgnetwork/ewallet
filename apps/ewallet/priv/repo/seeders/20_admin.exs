# This is the seeding script for User (admin & viewer users).

import EWalletDB.Helpers.Crypto, only: [generate_key: 1]

admin_seeds = [
  # Seed an admin user for each account
  %{email: "admin_master@example.com", password: generate_key(16), metadata: %{}},
  %{email: "admin_brand1@example.com", password: generate_key(16), metadata: %{}},
  %{email: "admin_brand2@example.com", password: generate_key(16), metadata: %{}},
  %{email: "admin_branch1@example.com", password: generate_key(16), metadata: %{}},
  %{email: "admin_branch2@example.com", password: generate_key(16), metadata: %{}},
  %{email: "admin_branch3@example.com", password: generate_key(16), metadata: %{}},
  %{email: "admin_branch4@example.com", password: generate_key(16), metadata: %{}},

  # Seed a viewer user for each account
  %{email: "viewer_master@example.com", password: generate_key(16), metadata: %{}},
  %{email: "viewer_brand1@example.com", password: generate_key(16), metadata: %{}},
  %{email: "viewer_brand2@example.com", password: generate_key(16), metadata: %{}},
  %{email: "viewer_branch1@example.com", password: generate_key(16), metadata: %{}},
  %{email: "viewer_branch2@example.com", password: generate_key(16), metadata: %{}},
  %{email: "viewer_branch3@example.com", password: generate_key(16), metadata: %{}},
  %{email: "viewer_branch4@example.com", password: generate_key(16), metadata: %{}},
]

# Note that we use `account_name` instead of the account's `id` because
# the `id` is autogenerated, so we cannot know the `id` before hand.
memberships = [
  # Assign the admin user to its account
  %{email: "admin_master@example.com", role_name: "admin", account_name: "master_account"},
  %{email: "admin_brand1@example.com", role_name: "admin", account_name: "brand1"},
  %{email: "admin_brand2@example.com", role_name: "admin", account_name: "brand2"},
  %{email: "admin_branch1@example.com", role_name: "admin", account_name: "branch1"},
  %{email: "admin_branch2@example.com", role_name: "admin", account_name: "branch2"},
  %{email: "admin_branch3@example.com", role_name: "admin", account_name: "branch3"},
  %{email: "admin_branch4@example.com", role_name: "admin", account_name: "branch4"},

  # Assign the viewer user to its account
  %{email: "viewer_master@example.com", role_name: "viewer", account_name: "master_account"},
  %{email: "viewer_brand1@example.com", role_name: "viewer", account_name: "brand1"},
  %{email: "viewer_brand2@example.com", role_name: "viewer", account_name: "brand2"},
  %{email: "viewer_branch1@example.com", role_name: "viewer", account_name: "branch1"},
  %{email: "viewer_branch2@example.com", role_name: "viewer", account_name: "branch2"},
  %{email: "viewer_branch3@example.com", role_name: "viewer", account_name: "branch3"},
  %{email: "viewer_branch4@example.com", role_name: "viewer", account_name: "branch4"},
]

EWalletDB.CLI.info("\nSeeding admin panel users (email, password, id)...")

Enum.each(admin_seeds, fn(data) ->
  with nil <- EWalletDB.User.get_by_email(data.email),
       {:ok, user} <- EWalletDB.User.insert(data)
  do
    EWalletDB.CLI.success("ðŸ”§ Admin Panel user inserted:\n"
      <> "  Email: #{user.email}\n"
      <> "  Password: #{data.password}\n"
      <> "  ID: #{user.id}")
  else
    %EWalletDB.User{} ->
      EWalletDB.CLI.warn("ðŸ”§ Admin Panel user #{data.email} is already in DB")
    {:error, _} ->
      EWalletDB.CLI.error("ðŸ”§ Admin Panel user #{data.email}" <> " could not be inserted due to an error")
  end
end)

EWalletDB.CLI.info("\nSeeding admin panel user roles...")

Enum.each(memberships, fn(membership) ->
  with %EWalletDB.User{} = user <- EWalletDB.User.get_by_email(membership.email),
       %EWalletDB.Account{} = account <- EWalletDB.Account.get_by_name(membership.account_name),
       %EWalletDB.Role{} = role <- EWalletDB.Role.get_by_name(membership.role_name),
       {:ok, _} <- EWalletDB.Membership.assign(user, account, role)
  do
    EWalletDB.CLI.success("ðŸ”§ Admin Panel user assigned: #{user.email}, account: #{account.name}"
      <> ", role: #{role.name}")
  else
    _ ->
      EWalletDB.CLI.error("ðŸ”§ Admin Panel user #{membership.email} could not be assigned due to an error")
  end
end)
