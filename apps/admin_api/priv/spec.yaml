openapi: 3.0.0
info:
  version: "1.0.0"
  title: eWallet Admin API
  description: >
    This is the documentation for eWallet Admin API.


    All calls must be user-authenticated or provider-authenticated. That is, the client must first
    authenticate with the API using the user's email and password.
    On successful authentication, the API returns an authentication token
    (i.e. `authentication_token`).

    Once a valid `authentication_token` is received, use the given auth token
    to make subsequent calls to the API via HTTP header:

    ```
    Authorization=OMGAdmin Base64(user_id:authentication_token)
    ```

    An access/secret keys combination can be used as well.

    ```
    Authorization=OMGProvider Base64(access_key:secret_key)
    ```

    Due to HTTP-RPC nature, the API will always return a `200` HTTP status,
    including on errors. Only in case of an internal server error that `500`
    will be returned.


    Error codes are available in [html](./errors), [json](./errors.json)
    and [yaml](./errors.yaml) formats.
  contact:
    name: OmiseGO
    email: thibault@omisego.co
  license:
    name: 'Apache 2.0: https://www.apache.org/licenses/LICENSE-2.0'
    url: 'https://omisego.network/'

tags:
  - name: AdminSession
    description: Resources related to admin session tokens.
  - name: Admin
    description: Resources related to admin users.
  - name: UserSession
    description: Resources related to user session tokens.
  - name: User
    description: Resources related to users.
  - name: Token
    description: Resources related to tokens.
  - name: ExchangePair
    description: Resources related to exchange pairs.
  - name: Category
    description: Resources related to categories.
  - name: Account
    description: Resources related to accounts.
  - name: Wallet
    description: Resources related to wallets.
  - name: Transaction
    description: Resources related to transactions.
  - name: TransactionRequest
    description: Resources related to the creation of transaction requests (either receiving or sending) that needs to be consumed by another user.
  - name: TransactionConsumption
    description: Resources related to consumption of transaction requests.
  - name: API Access
    description: Resources related to API access.
servers:
  - url: /api/admin

paths:
  ######################################
  #       ADMIN SESSION ENDPOINTS      #
  ######################################
  /admin.login:
    post:
      tags:
        - AdminSession
      summary: Login an existing admin user using email and password.
      operationId: login
      security:
        - ClientAuth: []
      requestBody:
        $ref: '#/components/requestBodies/LoginBody'
      responses:
        '200':
          $ref: "#/components/responses/AuthenticationTokenResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /me.logout:
    post:
      tags:
        - AdminSession
      summary: Expires a user's authentication_token.
      operationId: logout
      security:
        - AdminAuth: []
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /auth_token.switch_account:
    post:
      tags:
        - AdminSession
      summary: Switch the current account associated with the auth token.
      operationId: switch_account
      security:
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/SwitchAccountBody'
      responses:
        '200':
          $ref: "#/components/responses/AuthenticationTokenResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /admin.reset_password:
    post:
      tags:
        - AdminSession
      summary: Sends an email containing a link to reset the password.
      operationId: password_reset
      security:
        - ClientAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ResetPasswordBody'
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /admin.update_password:
    post:
      tags:
        - AdminSession
      summary: Reset the password for a specific token with the provided new password.
      operationId: password_update
      security:
        - ClientAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UpdatePasswordBody'
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  ######################################
  #        USER SESSION ENDPOINTS      #
  ######################################
  /user.login:
    post:
      tags:
        - UserSession
      summary: Login an existing user. The provider can call this to get an authentication token for a specific user.
      operationId: user_login
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserIdentifierBody'
      responses:
        '200':
          $ref: "#/components/responses/AuthenticationTokenResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /user.logout:
    post:
      tags:
        - UserSession
      summary: Expires a user's authentication_token.
      operationId: user_logout
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/LogoutUserBody'
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  #####################################
  #          TOKEN ENDPOINTS          #
  #####################################
  /token.all:
    post:
      tags:
        - Token
      summary: Get the list of tokens
      operationId: token_all
      security:
        - AdminAuth: []
        - ProviderAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TokenAllBody'
      responses:
        '200':
          $ref: "#/components/responses/TokensResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /token.get:
    post:
      tags:
        - Token
      summary: Get a specific token
      operationId: token_get
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TokenGetBody'
      responses:
        '200':
          $ref: "#/components/responses/TokenResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to create a new token
  /token.create:
    post:
      tags:
        - Token
      summary: Create a new token
      operationId: token_create
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TokenCreateBody'
      responses:
        '200':
          $ref: "#/components/responses/TokenResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to create a new token
  /token.update:
    post:
      tags:
        - Token
      summary: Update an existing token
      operationId: token_update
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TokenUpdateBody'
      responses:
        '200':
          $ref: "#/components/responses/TokenResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to create a new token
  /token.stats:
    post:
      tags:
        - Token
      summary: Get the statistics for a token
      operationId: token_stats
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TokenStatsBody'
      responses:
        '200':
          $ref: "#/components/responses/TokenStatsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to get mints for a token
  /token.get_mints:
    post:
      tags:
        - Token
      summary: Get the list of mints for a token
      operationId: token_get_mints
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TokenGetMintsBody'
      responses:
        '200':
          $ref: "#/components/responses/MintsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to create a new token
  /token.mint:
    post:
      tags:
        - Token
      summary: Mint an existing token
      operationId: token_mint
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TokenMintBody'
      responses:
        '200':
          $ref: "#/components/responses/TokenResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  #####################################
  #      EXCHANGE PAIR ENDPOINTS      #
  #####################################
  /exchange_pair.all:
    post:
      tags:
        - ExchangePair
      summary: Get the list of exchange pairs
      operationId: exchange_pair_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ExchangePairAllBody'
      responses:
        '200':
          $ref: "#/components/responses/ExchangePairsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /exchange_pair.get:
    post:
      tags:
        - ExchangePair
      summary: Get the a specific exchange pair by its id
      operationId: exchange_pair_get
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ExchangePairGetBody'
      responses:
        '200':
          $ref: "#/components/responses/ExchangePairResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /exchange_pair.create:
    post:
      tags:
        - ExchangePair
      summary: Create a new exchange pair
      operationId: exchange_pair_create
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ExchangePairCreateBody'
      responses:
        '200':
          $ref: "#/components/responses/ExchangePairsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /exchange_pair.update:
    post:
      tags:
        - ExchangePair
      summary: Update an existing exchange pair by its id
      operationId: exchange_pair_update
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ExchangePairUpdateBody'
      responses:
        '200':
          $ref: "#/components/responses/ExchangePairsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /exchange_pair.delete:
    post:
      tags:
        - ExchangePair
      summary: Delete an exchange pair by its id
      operationId: exchange_pair_delete
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ExchangePairDeleteBody'
      responses:
        '200':
          $ref: "#/components/responses/ExchangePairsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  ####################################
  #        CATEGORY ENDPOINTS        #
  ####################################
  /category.all:
    post:
      tags:
        - Category
      summary: Get the list of categories
      operationId: category_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CategoryAllBody'
      responses:
        '200':
          $ref: "#/components/responses/CategoriesResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /category.get:
    post:
      tags:
        - Category
      summary: Get a specific category
      operationId: category_get
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CategoryGetBody'
      responses:
        '200':
          $ref: "#/components/responses/CategoryResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /category.create:
    post:
      tags:
        - Category
      summary: Create a new category
      operationId: category_create
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CategoryCreateBody'
      responses:
        '200':
          $ref: "#/components/responses/CategoryResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /category.update:
    post:
      tags:
        - Category
      summary: Update a category
      operationId: category_update
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CategoryUpdateBody'
      responses:
        '200':
          $ref: "#/components/responses/CategoryResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /category.delete:
    post:
      tags:
        - Category
      summary: Delete a category
      operationId: category_delete
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CategoryDeleteBody'
      responses:
        '200':
          $ref: "#/components/responses/CategoryResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  ############################
  #         ACCOUNTS         #
  ############################
  # Endpoint to get info about the accounts
  /account.all:
    post:
      tags:
        - Account
      summary: Get the list of accounts
      operationId: account_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountAllBody'
      responses:
        '200':
          $ref: "#/components/responses/AccountsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.get:
    post:
      tags:
        - Account
      summary: Get a specific account
      operationId: account_get
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountGetBody'
      responses:
        '200':
          $ref: "#/components/responses/AccountResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.create:
    post:
      tags:
        - Account
      summary: Create a new account
      operationId: account_create
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountCreateBody'
      responses:
        '200':
          $ref: "#/components/responses/AccountResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.update:
    post:
      tags:
        - Account
      summary: Update an account
      operationId: account_update
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountUpdateBody'
      responses:
        '200':
          $ref: "#/components/responses/AccountResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.upload_avatar:
    post:
      tags:
        - Account
      summary: Uploads avatar for an account
      operationId: account_upload_avatar
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountUploadBody'
      responses:
        '200':
          $ref: "#/components/responses/AccountResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.assign_user:
    post:
      tags:
        - Account
      summary: Assigns a user to an account with a role
      operationId: account_assign_user
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountAssignUserBody'
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.unassign_user:
    post:
      tags:
        - Account
      summary: Unassigns a user from an account
      operationId: account_unassign_user
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountUnassignUserBody'
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.get_members:
    post:
      tags:
        - Account
      summary: List the admins that are currently assigned to the given acount
      operationId: account_get_members
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountListBody'
      responses:
        '200':
          $ref: "#/components/responses/MembersResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.get_users:
    post:
      tags:
        - Account
      summary: List the users that are linked with the given account
      operationId: account_get_users
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountListBodyWithOwned'
      responses:
        '200':
          $ref: "#/components/responses/UsersResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.get_descendants:
    post:
      tags:
        - Account
      summary: Get the list of descendants for the given account
      operationId: account_get_descantants
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountAllBody'
      responses:
        '200':
          $ref: "#/components/responses/AccountsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.get_wallets:
    post:
      tags:
        - Account
      summary: Get the list of wallets for the given account
      operationId: account_get_wallets
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountListBodyWithOwned'
      responses:
        '200':
          $ref: "#/components/responses/WalletsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.get_transactions:
    post:
      tags:
        - Account
      summary: List the transactions for the current account
      operationId: account_get_transactions
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountListBodyWithOwned'
      responses:
        '200':
          $ref: "#/components/responses/TransactionsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.get_transaction_requests:
    post:
      tags:
        - Account
      summary: List the transaction requests for the current account
      operationId: account_get_transaction_requests
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountListBodyWithOwned'
      responses:
        '200':
          $ref: "#/components/responses/TransactionRequestsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /account.get_transaction_consumptions:
    post:
      tags:
        - Account
      summary: List the transaction consumptions for the current account
      operationId: account_get_transaction_consumptions
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountListBodyWithOwned'
      responses:
        '200':
          $ref: "#/components/responses/TransactionConsumptionsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  #####################################
  #        ADMIN USER ENDPOINTS       #
  #####################################
  /admin.all:
    post:
      tags:
        - Admin
      summary: Get the list of admins
      operationId: admin_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AdminAllBody'
      responses:
        '200':
          $ref: "#/components/responses/AdminsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /admin.get:
    post:
      tags:
        - Admin
      summary: Get a specific admin
      operationId: admin_get
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AdminGetBody'
      responses:
        '200':
          $ref: "#/components/responses/AdminResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /invite.accept:
    post:
      tags:
        - Admin
      summary: Accepts an invite
      operationId: invite_accept
      security:
        - ClientAuth: []
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  #####################################
  #    CURRENT ADMIN USER ENDPOINTS   #
  #####################################
  /me.get:
    post:
      tags:
        - Admin
      summary: Get the user corresponding to the provided authentication header.
      operationId: me_get
      security:
        - AdminAuth: []
      responses:
        '200':
          $ref: "#/components/responses/AdminResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /me.update:
    post:
      tags:
        - Admin
      summary: Update the user with the provided parameters
      operationId: me_update
      security:
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AdminUpdateBody'
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /me.upload_avatar:
    post:
      tags:
        - Admin
      summary: Uploads avatar for an admin
      operationId: admin_upload_avatar
      security:
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AdminUploadBody'
      responses:
        '200':
          $ref: "#/components/responses/AdminResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /me.get_account:
    post:
      tags:
        - Admin
      summary: Get the one upper-most account that the user has membership in.
      operationId: me_get_account
      security:
        - AdminAuth: []
      responses:
        '200':
          $ref: "#/components/responses/AccountResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /me.get_accounts:
    post:
      tags:
        - Admin
      summary: Get the list of account and sub-accounts that the user has membership in.
      operationId: me_get_accounts
      security:
        - AdminAuth: []
      responses:
        '200':
          $ref: "#/components/responses/AccountsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  #####################################
  #           USER ENDPOINTS          #
  #####################################
  /user.all:
    post:
      tags:
        - User
      summary: Get the list of users
      operationId: user_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserAllBody'
      responses:
        '200':
          $ref: "#/components/responses/UsersResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /user.create:
    post:
      tags:
        - User
      summary: Create a new user
      operationId: user_create
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /user.update:
    post:
      tags:
        - User
      summary: Update an existing user
      operationId: user_update
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /user.get:
    post:
      tags:
        - User
      summary: Get a specific user
      operationId: user_get
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserIdentifierBody'
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /user.get_wallets:
    post:
      tags:
        - User
      summary: Get the list of wallets for the given user
      operationId: user_wallet_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserIdentifierWithFiltersBody'
      responses:
        '200':
          $ref: "#/components/responses/WalletsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /user.get_transactions:
    post:
      tags:
        - User
      summary: Get the list of transactions for the given user
      operationId: get_all_transactions_for_user
      requestBody:
        $ref: '#/components/requestBodies/UserIdentifierWithFiltersBody'
      security:
        - ProviderAuth: []
        - AdminAuth: []
      responses:
        '200':
          $ref: "#/components/responses/TransactionsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"


  #####################################
  #        WALLET ENDPOINTS          #
  #####################################
  /wallet.all:
    post:
      tags:
        - Wallet
      summary: Get the list of wallets
      operationId: wallet_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/WalletAllBody'
      responses:
        '200':
          $ref: "#/components/responses/WalletsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /wallet.create:
    post:
      tags:
        - Wallet
      summary: Create a wallet
      operationId: wallet_create
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/WalletCreateBody'
      responses:
        '200':
          $ref: "#/components/responses/WalletResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /wallet.get:
    post:
      tags:
        - Wallet
      summary: Get a specific wallet
      operationId: wallet_get
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/WalletGetBody'
      responses:
        '200':
          $ref: "#/components/responses/WalletResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  #####################################
  #       TRANSACTION ENDPOINTS       #
  #####################################
  /transaction.all:
    post:
      tags:
        - Transaction
      summary: Get the list of transactions
      operationId: transaction_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionAllBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /transaction.get:
    post:
      tags:
        - Transaction
      summary: Get the a specific transaction by its id
      operationId: transaction_get
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionGetBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /transaction.create:
    post:
      tags:
        - Transaction
      summary: Create a new transaction
      operationId: transaction_create
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionCreateBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /transaction.calculate:
    post:
      tags:
        - Transaction
      summary: Calculates transaction amounts
      operationId: transaction_calculate
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionCalculateBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionCalculationResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  ############################
  #   TRANSACTION REQUESTS   #
  ############################
  # Endpoint to list all transaction requests
  /transaction_request.all:
    post:
      tags:
        - TransactionRequest
      summary: Get the list of transaction requests
      operationId: transaction_request_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionRequestAllBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionRequestsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to create a transaction request
  /transaction_request.create:
    post:
      tags:
        - TransactionRequest
      summary: Create a new transaction request.
      description: This is a server call only.
      operationId: transaction_request_create
      security:
        - ProviderAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateTransactionRequestBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionRequestResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to get a transaction request
  /transaction_request.get:
    post:
      tags:
        - TransactionRequest
      summary: Get a transaction request.
      description: This is a server call only.
      operationId: transaction_request_get
      security:
        - ProviderAuth: []
      requestBody:
        $ref: '#/components/requestBodies/GetTransactionRequestBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionRequestResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to consume a transaction request
  /transaction_request.consume:
    post:
      tags:
        - TransactionRequest
      summary: Consume a transaction request.
      description: This is a server call only.
      operationId: transaction_request_consume
      security:
        - ProviderAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ConsumeTransactionRequestBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionConsumptionResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  ############################
  # TRANSACTION CONSUMPTIONS #
  ############################
  /user.get_transaction_consumptions:
    post:
      tags:
        - User
      summary: Get the list of transaction consumptions for a user
      operationId: user_get_consumptions
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserIdentifierWithFiltersBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionConsumptionsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /wallet.get_transaction_consumptions:
    post:
      tags:
        - Wallet
      summary: Get the list of transaction consumptions for a wallet
      operationId: wallet_get_consumptions
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionConsumptionAllForWalletBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionConsumptionsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /transaction_request.get_transaction_consumptions:
    post:
      tags:
        - TransactionRequest
      summary: Get the list of transaction consumptions for a transaction request
      operationId: transaction_request_get_consumptions
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionConsumptionAllForTransactionRequestBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionConsumptionsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to list all consumptions
  /transaction_consumption.all:
    post:
      tags:
        - TransactionConsumption
      summary: Get the list of transaction consumptions
      operationId: transaction_consumption_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionConsumptionAllBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionConsumptionsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to get a consumption
  /transaction_consumption.get:
    post:
      tags:
        - TransactionConsumption
      summary: Get a consumption.
      description: This is a server call only.
      operationId: transaction_consumption_get
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/GetConsumptionRequestBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionConsumptionResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to approve a consumption
  /transaction_consumption.approve:
    post:
      tags:
        - TransactionConsumption
      summary: Approve a consumption.
      description: This is a server call only.
      operationId: transaction_consumption_approve
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ConsumptionConfirmationRequestBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionConsumptionResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to reject a consumption
  /transaction_consumption.reject:
    post:
      tags:
        - TransactionConsumption
      summary: Reject a consumption.
      description: This is a server call only.
      operationId: transaction_consumption_reject
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ConsumptionConfirmationRequestBody'
      responses:
        '200':
          $ref: "#/components/responses/TransactionConsumptionResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"


  ######################################
  #        API ACCESS ENDPOINTS        #
  ######################################
  /access_key.all:
    post:
      tags:
        - API Access
      summary: Get the list of access and secret keys
      operationId: access_key_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccessKeyAllBody'
      responses:
        '200':
          $ref: "#/components/responses/AccessKeysResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /access_key.create:
    post:
      tags:
        - API Access
      summary: Create a pair of access and secret keys
      operationId: access_key_create
      security:
        - ProviderAuth: []
        - AdminAuth: []
      responses:
        '200':
          $ref: "#/components/responses/AccessKeyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /access_key.update:
    post:
      tags:
        - API Access
      summary: Update a pair of access and secret keys by its id
      operationId: access_key_update
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccessKeyUpdateBody'
      responses:
        '200':
          $ref: "#/components/responses/AccessKeyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /access_key.delete:
    post:
      tags:
        - API Access
      summary: Delete a pair of access and secret keys by its id or access key
      operationId: access_key_delete
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AccessKeyDeleteBody'
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /api_key.all:
    post:
      tags:
        - API Access
      summary: Get the list of API keys
      operationId: api_key_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/APIKeyAllBody'
      responses:
        '200':
          $ref: "#/components/responses/APIKeysResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /api_key.create:
    post:
      tags:
        - API Access
      summary: Create an API key
      operationId: api_key_create
      security:
        - ProviderAuth: []
        - AdminAuth: []
      responses:
        '200':
          $ref: "#/components/responses/APIKeyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /api_key.update:
    post:
      tags:
        - API Access
      summary: Update an API key
      operationId: api_key_update
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/APIKeyUpdateBody'
      responses:
        '200':
          $ref: "#/components/responses/APIKeyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /api_key.delete:
    post:
      tags:
        - API Access
      summary: Delete an API key by its id
      operationId: api_key_delete
      security:
        - ProviderAuth: []
        - AdminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/APIKeyDeleteBody'
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  ######################################
  #          SETTINGS ENDPOINTS        #
  ######################################
  /settings.all:
    post:
      tags:
        - Setting
      summary: Get the global settings.
      operationId: settings_all
      security:
        - ProviderAuth: []
        - AdminAuth: []
      responses:
        '200':
          $ref: "#/components/responses/SettingResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

# Components are objects that are reusable within this API spec.
# They do not have any effect on the API unless they are
# referenced from properties outside the component.
components:
  schemas:
    ######################################
    #             BASE SCHEMAS           #
    ######################################
    BaseResponseSchema:
      description: "The response schema for a successful operation"
      type: object
      properties:
        version:
          type: string
        success:
          type: boolean
        data:
          type: object
      required:
        - version
        - success
        - data
      example:
        version: "1"
        success: true
        data: {}
    UnpaginatedListSchema:
      description: "The object schema for an unpaginated list"
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            type: object
      required:
        - object
        - data
      example:
        object: list
        data: []
    PaginatedListSchema:
      description: "The object schema for a paginated list"
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            type: object
        pagination:
          type: object
          items:
            type: object
          properties:
            per_page:
              type: integer
              minimum: 1
            current_page:
              type: integer
              minimum: 1
            is_first_page:
              type: boolean
            is_last_page:
              type: boolean
          required:
            - per_page
            - current_page
            - is_first_page
            - is_last_page
      required:
        - object
        - data
        - pagination
      example:
        object: list
        data: []
        pagination:
          per_page: 10
          current_page: 1
          is_first_page: true
          is_last_page: true

    ######################################
    #            ERROR SCHEMAS           #
    ######################################
    ErrorSchema:
      description: "The object schema for an error"
      type: object
      properties:
        object:
          type: string
        code:
          type: string
        description:
          type: string
        messages:
          type: object
      required:
        - object
        - code
        - description
        - messages
      example:
        object: "error"
        code: "server:internal_server_error"
        description: "Something went wrong on the server"
        messages: {"error_key": "error_reason"}
    ErrorResponseSchema:
      description: "The response schema for an error"
      allOf:
        - $ref: '#/components/schemas/BaseResponseSchema'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ErrorSchema'
          required:
            - data
          example:
            success: false
            data:
              object: "error"
              code: "server:internal_server_error"
              description: "Something went wrong on the server"
              messages: {"error_key":"error_reason"}

    ######################################
    #          AUTH TOKEN SCHEMAS        #
    ######################################
    AuthenticationTokenSchema:
      description: "The object schema for an authentication token"
      type: object
      properties:
        object:
          type: string
        authentication_token:
          type: string
        user_id:
          type: string
        user:
          type: object
          $ref: '#/components/schemas/UserSchema'
        account_id:
          type: string
        master_admin:
          type: boolean
        account:
          type: object
          $ref: '#/components/schemas/AccountSchema'
        role:
          type: string
      required:
        - object
        - authentication_token
        - user_id
        - user
        - account_id
        - account
        - master_admin
        - role
    AuthenticationTokenResponseSchema:
      description: "The response schema for an authentication token"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/AuthenticationTokenSchema'
        required:
          - data
        example:
          data:
            object: "authentication_token"
            authentication_token: "azJRj09l7jvR8KhTqUs3"
            user_id: "usr_01cc02x0v98qcctvycfx4vsk8x"
            user:
              object: "user"
              id: "usr_01cc02x0v98qcctvycfx4vsk8x"
              provider_user_id: "wijf-fbancomw-dqwjudb"
              username: "johndoe"
              email: "johndoe@omise.co"
              metadata: {"first_name": "John", "last_name": "Doe"}
              encrypted_metadata: {"something": "secret"}
              created_at: "2018-01-01T00:00:00Z"
              updated_at: "2018-01-01T10:00:00Z"
            account_id: "acc_01ca2p8jqans5aty5gj5etmjcf"
            account:
              object: "account"
              id: "acc_01ca2p8jqans5aty5gj5etmjcf"
              parent_id: "acc_01ca26pkge49aabzd6k6mshn0y"
              name: "Account Name"
              description: "The account description"
              master: true
              metadata: {}
              encrypted_metadata: {}
              avatar: {"original": "file_url"}
              created_at: "2018-01-01T00:00:00Z"
              updated_at: "2018-01-01T10:00:00Z"
            master_admin: true
            role: 'admin'
    ######################################
    #         TOKEN SCHEMAS       #
    ######################################
    TokenSchema:
      description: "The object schema for a token"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        symbol:
          type: string
        name:
          type: string
        subunit_to_unit:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        metadata:
          type: object
        encrypted_metadata:
          type: object
      required:
        - object
        - id
        - symbol
        - name
        - subunit_to_unit
        - created_at
        - updated_at
    TokenResponseSchema:
      description: "The response schema for a token"
      allOf:
        - $ref: '#/components/schemas/BaseResponseSchema'
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/TokenSchema'
          required:
            - data
          example:
            version: "1"
            success: true
            data:
              object: "token"
              id: "tok_abc_01cbfge9qhmsdbjyb7a8e8pxt3"
              symbol: "ABC"
              name: "ABC Point"
              subunit_to_unit: 100
              created_at: "2018-01-01T00:00:00Z"
              updated_at: "2018-01-01T10:00:00Z"
    TokensResponseSchema:
      description: "The response schema for a list of tokens"
      allOf:
        - $ref: '#/components/schemas/BaseResponseSchema'
        - type: object
          properties:
            data:
              type: object
              allOf:
                - $ref: '#/components/schemas/PaginatedListSchema'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/TokenSchema'
          required:
            - data
          example:
            version: "1"
            success: true
            data:
              object: "list"
              data:
                - object: "token"
                  id: "tok_abc_01cbfge9qhmsdbjyb7a8e8pxt3"
                  symbol: "ABC"
                  name: "ABC Point"
                  subunit_to_unit: 100
                  created_at: "2018-01-01T00:00:00Z"
                  updated_at: "2018-01-01T10:00:00Z"
              pagination:
                per_page: 10
                current_page: 1
                is_first_page: true
                is_last_page: true
    TokenStatsResponseSchema:
      description: "The object schema for token stats"
      type: object
      properties:
        object:
          type: string
        token_id:
          type: string
        token:
          type: object
          $ref: '#/components/schemas/TokenSchema'
        total_supply:
          type: integer
      required:
        - object
        - token_id
        - token
        - total_supply
      example:
        version: "1"
        success: true
        data:
          object: "token_stats"
          total_supply: 100000
          token_id: "tok_abc_01cbfge9qhmsdbjyb7a8e8pxt3"
          token:
            object: "token"
            id: "tok_abc_01cbfge9qhmsdbjyb7a8e8pxt3"
            symbol: "ABC"
            name: "ABC Point"
            subunit_to_unit: 100
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"

    ######################################
    #             MINT SCHEMAS           #
    ######################################
    MintSchema:
      description: "The object schema for a mint"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        description:
          type: string
        amount:
          type: integer
        confirmed:
          type: boolean
        token_id:
          type: string
        token:
          type: object
          $ref: '#/components/schemas/TokenSchema'
        account_id:
          type: string
        account:
          type: object
          $ref: '#/components/schemas/AccountSchema'
        transaction_id:
          type: string
        transaction:
          type: object
          $ref: '#/components/schemas/TransactionSchema'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - object
        - id
        - description
        - amount
        - confirmed
        - token_id
        - token
        - account_id
        - account
        - transaction_id
        - transaction
        - created_at
        - updated_at
    MintsResponseSchema:
      description: "The response schema for a list of mints"
      allOf:
        - $ref: '#/components/schemas/BaseResponseSchema'
        - type: object
          properties:
            data:
              type: object
              allOf:
                - $ref: '#/components/schemas/PaginatedListSchema'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/MintSchema'
          required:
            - data
          example:
            version: "1"
            success: true
            data:
              object: "list"
              data:
                - object: "mint"
                  id: "mnt_01xbfge9qhmsdbjyb7a8e8pxt3"
                  description: "Some description"
                  amount: 10000
                  confirmed: true
                  token_id: "tok_abc_01cbfge9qhmsdbjyb7a8e8pxt3"
                  token: {}
                  account_id: "acc_01rebfge9qhmsdbjyb7a8e8pxt"
                  account: {}
                  transaction_id: "tfr_01trbfge9qhmsdbjyb7a8e8pxt"
                  transaction: {}
                  created_at: "2018-01-01T00:00:00Z"
                  updated_at: "2018-01-01T00:00:00Z"
              pagination:
                per_page: 10
                current_page: 1
                is_first_page: true
                is_last_page: true

    ######################################
    #        EXCHANGE PAIR SCHEMAS       #
    ######################################
    ExchangePairSchema:
      description: "The object schema for an exchange pair"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        name:
          type: string
        from_token_id:
          type: string
        from_token:
          $ref: '#/components/schemas/TokenSchema'
        to_token_id:
          type: string
        to_token:
          $ref: '#/components/schemas/TokenSchema'
        rate:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
      required:
        - object
        - id
        - name
        - from_token_id
        - from_token
        - to_token_id
        - to_token
        - rate
        - created_at
        - updated_at
    ExchangePairResponseSchema:
      description: "The response schema for an exchange pair"
      allOf:
        - $ref: '#/components/schemas/BaseResponseSchema'
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/ExchangePairSchema'
          required:
            - data
          example:
            version: "1"
            success: true
            data:
              object: "exchange_pair"
              id: "exg_01cgvppyrz2pprj6s0zmc26p2p"
              name: "ETH/OMG"
              from_token_id: "tok_ETH_01cbfge9qhmsdbjyb7a8e8pxt3"
              from_token:
                object: "token"
                id: "tok_ETH_01cbfge9qhmsdbjyb7a8e8pxt3"
                symbol: "ABC"
                name: "Ethereum"
                subunit_to_unit: 100
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
              to_token_id: "tok_OMG_01cgvrqbfpa23ehkmrtqpbsyyp"
              to_token:
                object: "token"
                id: "tok_OMG_01cgvrqbfpa23ehkmrtqpbsyyp"
                symbol: "OMG"
                name: "OmiseGO"
                subunit_to_unit: 100
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
              rate: 0.017
              created_at: "2018-01-01T00:00:00Z"
              updated_at: "2018-01-01T10:00:00Z"
              deleted_at: null
    ExchangePairsResponseSchema:
      description: "The response schema for a list of exchange pairs"
      allOf:
        - $ref: '#/components/schemas/BaseResponseSchema'
        - type: object
          properties:
            data:
              type: object
              allOf:
                - $ref: '#/components/schemas/PaginatedListSchema'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/ExchangePairSchema'
          required:
            - data
          example:
            version: "1"
            success: true
            data:
              object: "list"
              data:
                - object: "exchange_pair"
                  id: "exg_01cgvppyrz2pprj6s0zmc26p2p"
                  name: "ETH/OMG"
                  from_token_id: "tok_ETH_01cbfge9qhmsdbjyb7a8e8pxt3"
                  from_token:
                    object: "token"
                    id: "tok_ETH_01cbfge9qhmsdbjyb7a8e8pxt3"
                    symbol: "ABC"
                    name: "Ethereum"
                    subunit_to_unit: 100
                    created_at: "2018-01-01T00:00:00Z"
                    updated_at: "2018-01-01T10:00:00Z"
                  to_token_id: "tok_OMG_01cgvrqbfpa23ehkmrtqpbsyyp"
                  to_token:
                    object: "token"
                    id: "tok_OMG_01cgvrqbfpa23ehkmrtqpbsyyp"
                    symbol: "OMG"
                    name: "OmiseGO"
                    subunit_to_unit: 100
                    created_at: "2018-01-01T00:00:00Z"
                    updated_at: "2018-01-01T10:00:00Z"
                  rate: 0.017
                  created_at: "2018-01-01T00:00:00Z"
                  updated_at: "2018-01-01T10:00:00Z"
                  deleted_at: null
              pagination:
                per_page: 10
                current_page: 1
                is_first_page: true
                is_last_page: true

    ######################################
    #          CATEGORY SCHEMAS          #
    ######################################
    CategorySchema:
      description: "The object schema for a category"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        name:
          type: string
        description:
          type: string
        account_ids:
          type: array
          items:
            type: string
        accounts:
          type: object
          allOf:
            - $ref: '#/components/schemas/UnpaginatedListSchema'
            - type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountSchema'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - object
        - id
        - name
        - description
        - account_ids
        - created_at
        - updated_at
    CategoryResponseSchema:
      description: "The response schema for an category"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/CategorySchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "category"
            id: "cat_01ce31n493dqbtj3fe8hadwndx"
            name: "Category Name"
            description: "The category description"
            account_ids: []
            accounts: []
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"
    CategoriesResponseSchema:
      description: "The response schema for a list of categories"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategorySchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "category"
                id: "cat_01ce31n493dqbtj3fe8hadwndx"
                name: "Category Name"
                description: "The category description"
                account_ids: []
                accounts: []
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true

    ######################################
    #           ACCOUNT SCHEMAS          #
    ######################################
    AccountSchema:
      description: "The object schema for an account"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        parent_id:
          type: string
        name:
          type: string
        description:
          type: string
        master:
          type: boolean
        avatar:
          type: object
        category_ids:
          type: array
          items:
            type: string
        categories:
          type: object
          allOf:
            - $ref: '#/components/schemas/UnpaginatedListSchema'
            - type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/CategorySchema'
        metadata:
          type: object
        encrypted_metadata:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - object
        - id
        - parent_id
        - name
        - master
        - avatar
        - category_ids
        - created_at
        - updated_at
    AccountResponseSchema:
      description: "The response schema for an account"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/AccountSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "account"
            id: "acc_01ca2p8jqans5aty5gj5etmjcf"
            parent_id: "acc_01ca26pkge49aabzd6k6mshn0y"
            name: "Account Name"
            description: "The account description"
            master: true
            category_ids: []
            categories: []
            metadata: {}
            encrypted_metadata: {}
            avatar: {"original": "file_url"}
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"
    AccountsResponseSchema:
      description: "The response schema for a list of accounts"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccountSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "account"
                id: "acc_01ca2p8jqans5aty5gj5etmjcf"
                parent_id: "acc_01ca26pkge49aabzd6k6mshn0y"
                name: "Account name"
                description: "The account description"
                master: true
                category_ids: []
                categories: []
                metadata: {}
                encrypted_metadata: {}
                avatar: {"original": "file_url"}
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true

    ######################################
    #            USER SCHEMAS            #
    ######################################
    MemberSchema:
      description: "The object schema for an account member"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        username:
          type: string
        provider_user_id:
          type: string
        email:
          type: string
          format: email
        metadata:
          type: object
        encrypted_metadata:
          type: object
        avatar:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        role:
          type: string
        account:
          type: object
          $ref: '#/components/schemas/AccountSchema'
      required:
        - object
        - id
        - created_at
        - updated_at
      example:
        object: "user"
        id: "usr_01ce83zf80j542z4q4zqd8qvfx"
        provider_user_id: "wijf-fbancomw-dqwjudb"
        username: "johndoe"
        email: "johndoe@omise.co"
        metadata: {"first_name": "John", "last_name": "Doe"}
        encrypted_metadata: {"something": "secret"}
        avatar: {"original": "file_url"}
        created_at: "2018-01-01T00:00:00Z"
        updated_at: "2018-01-01T10:00:00Z"
        account: {}
        role: "admin"
    UserSchema:
      description: "The object schema for a user"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        username:
          type: string
        provider_user_id:
          type: string
        email:
          type: string
          format: email
        metadata:
          type: object
        encrypted_metadata:
          type: object
        avatar:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - object
        - id
        - created_at
        - updated_at
      example:
        object: "user"
        id: "usr_01ce83zf80j542z4q4zqd8qvfx"
        provider_user_id: "wijf-fbancomw-dqwjudb"
        username: "johndoe"
        email: "johndoe@omise.co"
        metadata: {"first_name": "John", "last_name": "Doe"}
        encrypted_metadata: {"something": "secret"}
        avatar: {"original": "file_url"}
        created_at: "2018-01-01T00:00:00Z"
        updated_at: "2018-01-01T10:00:00Z"
    UserResponseSchema:
      description: "The response schema for a user"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/UserSchema'
        required:
          - data
        example:
          data:
            object: "user"
            id: "usr_01ce83zf80j542z4q4zqd8qvfx"
            provider_user_id: "wijf-fbancomw-dqwjudb"
            username: "johndoe"
            email: "johndoe@omise.co"
            metadata: {"first_name": "John", "last_name": "Doe"}
            encrypted_metadata: {"something": "secret"}
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"
    MembersResponseSchema:
      description: "The response schema for a list of members"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MemberSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "user"
                id: "usr_01ce83zf80j542z4q4zqd8qvfx"
                provider_user_id: null
                username: "johndoe"
                email: "johndoe@omise.co"
                metadata: {"first_name": "John", "last_name": "Doe"}
                encrypted_metadata: {"something": "secret"}
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
                role: "admin"
                account: {}
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true
    UsersResponseSchema:
      description: "The response schema for a list of users"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "user"
                id: "usr_01ce83zf80j542z4q4zqd8qvfx"
                provider_user_id: "wijf-fbancomw-dqwjudb"
                username: "johndoe"
                email: "johndoe@omise.co"
                metadata: {"first_name": "John", "last_name": "Doe"}
                encrypted_metadata: {"something": "secret"}
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true



    ######################################
    #         WALLET SCHEMAS            #
    ######################################
    WalletSchema:
      description: "The object schema for a wallet"
      type: object
      properties:
        object:
          type: string
        socket_topic:
          type: string
        address:
          type: string
        name:
          type: string
        identifier:
          type: string
        metadata:
          type: object
        encrypted_metadata:
          type: object
        user_id:
          type: string
        user:
          $ref: '#/components/schemas/UserSchema'
        account_id:
          type: string
        account:
          $ref: '#/components/schemas/AccountSchema'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/BalanceSchema'
      required:
        - object
        - socket_topic
        - address
        - name
        - identifier
        - metadata
        - encrypted_metadata
        - user_id
        - user
        - account_id
        - account
        - balances
      example:
        data:
          object: "wallet"
          socket_topic: "wallet:XXX123"
          address: "XXX123"
          name: "primary"
          identifier: "primary"
          metadata: {}
          encrypted_metadata: {}
          user_id: "usr_01cbfg6v9thrc3sd9m1v4gazjv"
          user: {}
          account_id: null
          account: null
          balances:
            - amount: 0
              token:
                object: "token"
                id: "tok_BTC_01cbffybmtbbb449r05zgfct2h"
                symbol: "BTC"
                name: "Bitcoin"
                subunit_to_unit: 100000000000000000
    BalanceSchema:
      description: "The object schema for a balance"
      type: object
      properties:
        object:
          type: string
        token:
          type: object
          $ref: '#/components/schemas/TokenSchema'
        amount:
          type: number
      required:
        - object
        - token
        - amount
      example:
        object: "balance"
        token:
          object: "token"
          id: "tok_BTC_01cbffybmtbbb449r05zgfct2h"
          symbol: "BTC"
          name: "Bitcoin"
          subunit_to_unit: 100000000000000000
        amount: 100

    WalletResponseSchema:
      description: "The response schema for a wallet"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/WalletSchema'
        required:
          - data
        example:
          data:
            object: "wallet"
            socket_topic: "wallet:XXX123"
            address: "XXX123"
            name: "primary"
            identifier: "primary"
            metadata: {}
            encrypted_metadata: {}
            user_id: "usr_01cbfg6v9thrc3sd9m1v4gazjv"
            user: {}
            account_id: null
            account: null
            balances:
              - amount: 0
                token:
                  object: "token"
                  id: "tok_BTC_01cbffybmtbbb449r05zgfct2h"
                  symbol: "BTC"
                  name: "Bitcoin"
                  subunit_to_unit: 100000000000000000
    WalletsResponseSchema:
      description: "The response schema for a list of wallets"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WalletSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "wallet"
                socket_topic: "wallet:XXX123"
                address: "XXX123"
                name: "primary"
                identifier: "primary"
                metadata: {}
                encrypted_metadata: {}
                user_id: "usr_01cbfg6v9thrc3sd9m1v4gazjv"
                user: {}
                account_id: null
                account: null
                balances:
                  - amount: 0
                    token:
                      object: "token"
                      id: "tok_BTC_01cbffybmtbbb449r05zgfct2h"
                      symbol: "BTC"
                      name: "Bitcoin"
                      subunit_to_unit: 100000000000000000
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true

    ######################################
    #         ADMIN USER SCHEMAS         #
    ######################################
    AdminResponseSchema:
      description: "The response schema for an admin user"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/UserSchema'
        required:
          - data
        example:
          data:
            object: "user"
            id: "usr_01ce83zf80j542z4q4zqd8qvfx"
            provider_user_id: "wijf-fbancomw-dqwjudb"
            username: "johndoe"
            email: "johndoe@omise.co"
            metadata: {"first_name": "John", "last_name": "Doe"}
            encrypted_metadata: {"something": "secret"}
            avatar: {"original": "file_url"}
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"
    AdminsResponseSchema:
      description: "The response schema for a list of admin users"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "user"
                id: "usr_01ce83zf80j542z4q4zqd8qvfx"
                provider_user_id: "wijf-fbancomw-dqwjudb"
                username: "johndoe"
                email: "johndoe@omise.co"
                metadata: {"first_name": "John", "last_name": "Doe"}
                encrypted_metadata: {"something": "secret"}
                avatar: {"original": "file_url"}
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true

    ######################################
    #         TRANSACTION SCHEMAS        #
    ######################################
    TransactionSchema:
      description: "The object schema for a transaction"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        from:
          type: object
          properties:
            object:
              type: string
            address:
              type: string
            amount:
              type: number
            token:
              type: object
              $ref: '#/components/schemas/TokenSchema'
        to:
          type: object
          properties:
            object:
              type: string
            address:
              type: string
            amount:
              type: number
            token:
              type: object
              $ref: '#/components/schemas/TokenSchema'
        exchange:
          type: object
          properties:
            object:
              type: string
            rate:
              type: number
        metadata:
          type: object
        encrypted_metadata:
          type: object
        status:
          type: string
          enum:
            - comfirmed
            - pending
            - failed
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - object
        - id
        - idempotency_token
        - from
        - to
        - exchange
        - status
        - created_at
        - updated_at
    TransactionResponseSchema:
      description: "The response schema for a transaction"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/TransactionSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "transaction"
            id: "txn_01ce840q5svw6058r8yk6jzf65"
            idempotency_token: "123982f5-4a27-498d-a91b-7bb2e2a8d3d1"
            from:
              object: "transaction_source"
              address: "bec66785-f0d8-416c-a650-2859aa680166"
              amount: 1000
              token:
                object: "token"
                id: "tok_ABC_01cbfge9qhmsdbjyb7a8e8pxt3"
                symbol: "ABC"
                name: "ABC Point"
                subunit_to_unit: 100
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
            to:
              object: "transaction_source"
              address: "47218ab4-d94f-44e9-b7f2-36061f76ce58"
              amount: 1000
              token:
                object: "token"
                id: "tok_ABC_01cbfge9qhmsdbjyb7a8e8pxt3"
                symbol: "ABC"
                name: "ABC Point"
                subunit_to_unit: 100
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
            metadata: {}
            encrypted_metadata: {}
            exchange:
              object: "exchange"
              rate: 1
            status: "confirmed"
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"
    TransactionsResponseSchema:
      description: "The response schema for a list of transactions"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransactionSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "transaction"
                id: "txn_01ce842dxrrprkak0rzq716ax1"
                from:
                  object: "transaction_source"
                  address: "bec66785-f0d8-416c-a650-2859aa680166"
                  amount: 1000
                  token:
                    object: "token"
                    id: "tok_ABC_01cbfge9qhmsdbjyb7a8e8pxt3"
                    symbol: "ABC"
                    name: "ABC Point"
                    subunit_to_unit: 100
                    created_at: "2018-01-01T00:00:00Z"
                    updated_at: "2018-01-01T10:00:00Z"
                to:
                  object: "transaction_source"
                  address: "47218ab4-d94f-44e9-b7f2-36061f76ce58"
                  amount: 1000
                  token:
                    object: "token"
                    id: "tok_ABC_01cbfge9qhmsdbjyb7a8e8pxt3"
                    symbol: "ABC"
                    name: "ABC Point"
                    subunit_to_unit: 100
                    created_at: "2018-01-01T00:00:00Z"
                    updated_at: "2018-01-01T10:00:00Z"
                exchange:
                  object: "exchange"
                  rate: 1
                metadata: {}
                encrypted_metadata: {}
                status: "confirmed"
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true
    TransactionCalculationSchema:
      description: "The object schema for a transaction calculation"
      type: object
      properties:
        object:
          type: string
        from_amount:
          type: integer
        from_token_id:
          type: string
        to_amount:
          type: integer
        to_token_id:
          type: string
        exchange_pair:
          $ref: '#/components/schemas/ExchangePairSchema'
        calculated_at:
          type: string
          format: date-time
      required:
        - object
        - from_amount
        - from_token_id
        - to_amount
        - to_token_id
        - exchange_pair
        - calculated_at
    TransactionCalculationResponseSchema:
      description: "The response schema for a transaction calculation"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/TransactionCalculationSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "transaction_calculation"
            from_amount: 20
            from_token_id: "tok_ETH_01cbfge9qhmsdbjyb7a8e8pxt3"
            to_amount: 20000
            to_token_id: "tok_OMG_01cgvrqbfpa23ehkmrtqpbsyyp"
            exchange_pair:
              object: "exchange_pair"
              id: "exg_01cgvppyrz2pprj6s0zmc26p2p"
              name: "ETH/OMG"
              from_token_id: "tok_ETH_01cbfge9qhmsdbjyb7a8e8pxt3"
              from_token:
                object: "token"
                id: "tok_ETH_01cbfge9qhmsdbjyb7a8e8pxt3"
                symbol: "ETH"
                name: "Ethereum"
                subunit_to_unit: 100
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
              to_token_id: "tok_OMG_01cgvrqbfpa23ehkmrtqpbsyyp"
              to_token:
                object: "token"
                id: "tok_OMG_01cgvrqbfpa23ehkmrtqpbsyyp"
                symbol: "OMG"
                name: "OmiseGO"
                subunit_to_unit: 100
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
              rate: 1000
              created_at: "2018-01-10T00:00:00Z"
              updated_at: "2018-01-10T10:00:00Z"
            calculated_at: "2018-02-02T00:00:00Z"

    ######################################
    #     TRANSACTION REQUEST SCHEMAS    #
    ######################################
    TransactionRequestsResponseSchema:
      description: "The response schema for a list of transaction requests"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransactionRequestSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "transaction_request"
                id: "txr_01cbfg8mafdnbthgb9e68nd9y9"
                formatted_id: "data|txr_01cbfg8mafdnbthgb9e68nd9y9"
                socket_topic: "transaction_request:txr_01cbfg8mafdnbthgb9e68nd9y9"
                type: "send"
                amount: 100
                status: "valid"
                correlation_id: "123"
                token_id: "tok_OMG_01cbffwvj6ma9a9gg1tb24880q"
                token: null
                address: "3a560be5-15d1-4463-9ec2-02bc8ded7120"
                user_id: "usr_01cbfg922kzmhvw04xvqn17qbd"
                account_id: "acc_01cbfg9b5hn05rszm3na8jac7f"
                require_confirmation: true
                max_consumptions: 3
                max_consumptions_per_user: null
                consumption_lifetime: 1000
                expiration_reason: null
                allow_amount_override: false
                metadata: {}
                encrypted_metadata: {}
                expiration_date: "2018-01-01T00:00:00Z"
                expired_at: "2018-01-01T00:00:00Z"
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T00:00:00Z"
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true
    # Schema for transaction request response body
    TransactionRequestSchema:
      description: "The response schema for a transaction request"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          object:
            type: string
          id:
            type: string
          socket_topic:
            type: string
          type:
            type: string
            enum:
              - send
              - receive
          amount:
            type: string
          status:
            type: string
            enum:
              - valid
              - expired
          correlation_id:
            type: string
          token_id:
            type: string
          token:
            type: object
          address:
            type: string
          user_id:
            type: string
          account_id:
            type: string
          require_confirmation:
            type: boolean
          max_consumptions:
            type: integer
          max_consumptions_per_user:
            type: integer
          consumption_lifetime:
            type: integer
          expiration_reason:
            type: string
            enum:
              - max_consumptions_reached
              - expired_transaction_request
              - null
          allow_amount_override:
            type: boolean
          metadata:
            type: object
          encrypted_metadata:
            type: object
          expiration_date:
            type: string
          expired_at:
            type: string
          created_at:
            type: string
          updated_at:
            type: string
        required:
          - object
          - id
          - formatted_id
          - socket_topic
          - type
          - amount
          - status
          - correlation_id
          - token_id
          - token
          - address
          - user_id
          - account_id
          - require_confirmation
          - max_consumptions
          - max_consumptions_per_user
          - consumption_lifetime
          - expiration_reason
          - allow_amount_override
          - metadata
          - encrypted_metadata
          - expiration_date
          - expired_at
          - created_at
          - updated_at
        example:
          data:
            object: "transaction_request"
            id: "txr_01cbfg8mafdnbthgb9e68nd9y9"
            formatted_id: "data|txr_01cbfg8mafdnbthgb9e68nd9y9"
            socket_topic: "transaction_request:txr_01cbfg8mafdnbthgb9e68nd9y9"
            type: "send"
            amount: 100
            status: "valid"
            correlation_id: "123"
            token_id: "tok_OMG_01cbffwvj6ma9a9gg1tb24880q"
            token: null
            address: "3a560be5-15d1-4463-9ec2-02bc8ded7120"
            user_id: "usr_01cbfg922kzmhvw04xvqn17qbd"
            account_id: "acc_01cbfg9b5hn05rszm3na8jac7f"
            require_confirmation: true
            max_consumptions: 3
            max_consumptions_per_user: null
            consumption_lifetime: 1000
            expiration_reason: null
            allow_amount_override: false
            metadata: {}
            encrypted_metadata: {}
            expiration_date: "2018-01-01T00:00:00Z"
            expired_at: "2018-01-01T00:00:00Z"
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T00:00:00Z"


    ######################################
    #     TRANSACTION REQUEST SCHEMAS    #
    ######################################
    TransactionConsumptionsResponseSchema:
      description: "The response schema for a list of transaction consumptions"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransactionConsumptionSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "transaction_consumption"
                id: "txc_01cbfg9qtdken61agxhx6wvj9h"
                socket_topic: "transaction_consumption:txc_01cbfg9qtdken61agxhx6wvj9h"
                status: "confirmed"
                amount: 100
                token_id: "tok_OMG_01cbffwvj6ma9a9gg1tb24880q"
                token: {}
                correlation_id: "7e9c0be5-15d1-4463-9ec2-02bc8ded7120"
                idempotency_token: "7831c0be5-15d1-4463-9ec2-02bc8ded7120"
                transaction_id: "txn_01cbfga8g0dgwcfc7xh6ks1njt"
                transaction: {}
                user_id: "usr_01cbfgak47ng6x72vbwjca6j4v"
                user: {}
                account_id: "acc_01cbfgatsanznvzffqsekta5f0"
                account: {}
                transaction_request_id: "txr_01cbfgb66cby8wp5wpq6n4pm0h"
                transaction_request: {}
                address: "5555cer3-15d1-4463-9ec2-02bc8ded7120"
                metadata: {}
                encrypted_metadata: {}
                expiration_date: null
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T00:00:00Z"
                approved_at: "2018-01-01T00:00:00Z"
                rejected_at: null
                confirmed_at: "2018-01-01T00:00:00Z"
                failed_at: null
                expired_at: null
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true
    # Schema for transaction request consumption response body
    TransactionConsumptionSchema:
      description: "The schema for a transaction request consumption"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          object:
            type: string
          id:
            type: string
          socket_topic:
            type: string
          status:
            type: string
            enum:
              - pending
              - approved
              - rejected
              - confirmed
              - failed
              - expired
          amount:
            type: string
          token_id:
            type: string
          token:
            type: object
          correlation_id:
            type: string
          idempotency_token:
            type: string
          transaction_id:
            type: string
          transaction:
            type: object
          user_id:
            type: string
          user:
            type: object
          account_id:
            type: string
          account:
            type: object
          transaction_request_id:
            type: string
          transaction_request:
            type: object
          address:
            type: string
          metadata:
            type: object
          encrypted_metadata:
            type: object
          expiration_date:
            type: string
          created_at:
            type: string
          updated_at:
            type: string
          approved_at:
            type: string
          rejected_at:
            type: string
          confirmed_at:
            type: string
          failed_at:
            type: string
          expired_at:
            type: string
        required:
          - object
          - id
          - socket_topic
          - status
          - amount
          - token_id
          - token
          - correlation_id
          - idempotency_token
          - transaction_id
          - transaction
          - user_id
          - user
          - account_id
          - account
          - transaction_request_id
          - transaction_request
          - address
          - metadata
          - encrypted_metadata
          - expiration_date
          - created_at
          - updated_at
          - approved_at
          - rejected_at
          - confirmed_at
          - failed_at
          - expired_at
        example:
          data:
            object: "transaction_consumption"
            id: "txc_01cbfg9qtdken61agxhx6wvj9h"
            socket_topic: "transaction_consumption:txc_01cbfg9qtdken61agxhx6wvj9h"
            status: "confirmed"
            amount: 100
            token_id: "tok_OMG_01cbffwvj6ma9a9gg1tb24880q"
            token: {}
            correlation_id: "7e9c0be5-15d1-4463-9ec2-02bc8ded7120"
            idempotency_token: "7831c0be5-15d1-4463-9ec2-02bc8ded7120"
            transaction_id: "txn_01cbfga8g0dgwcfc7xh6ks1njt"
            transaction: {}
            user_id: "usr_01cbfgak47ng6x72vbwjca6j4v"
            user: {}
            account_id: "acc_01cbfgatsanznvzffqsekta5f0"
            account: {}
            transaction_request_id: "txr_01cbfgb66cby8wp5wpq6n4pm0h"
            transaction_request: {}
            address: "5555cer3-15d1-4463-9ec2-02bc8ded7120"
            metadata: {}
            encrypted_metadata: {}
            expiration_date: null
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T00:00:00Z"
            approved_at: "2018-01-01T00:00:00Z"
            rejected_at: null
            confirmed_at: "2018-01-01T00:00:00Z"
            failed_at: null
            expired_at: null

    ######################################
    #           SETTING SCHEMAS          #
    ######################################
    SettingResponse:
      description: "The response schema for settings"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            properties:
              object:
                type: string
              tokens:
                type: array
                items:
                 $ref: '#/components/schemas/TokenSchema'
            required:
              - object
              - tokens
        example:
          data:
            object: "setting"
            tokens:
              - object: "token"
                id: "tok_BTC_01cbffybmtbbb449r05zgfct2h"
                symbol: "BTC"
                name: "Bitcoin"
                subunit_to_unit: 100000000000000000
              - object: "token"
                id: "tok_OMG_01cbffwvj6ma9a9gg1tb24880q"
                symbol: "OMG"
                name: "OmiseGO"
                subunit_to_unit: 100000000000000000

    ######################################
    #         ACCESS KEY SCHEMAS         #
    ######################################
    AccessKeySchema:
      description: "The object schema for an access key"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        access_key:
          type: string
        secret_key:
          type: string
          nullable: true
        account_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
      required:
        - object
        - id
        - access_key
        - account_id
        - created_at
        - updated_at
        - deleted_at
    AccessKeyResponseSchema:
      description: "The response schema for an access key"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/AccessKeySchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "key"
            id: "key_01ce843mvg5fa1zpk5myy69h4q"
            access_key: "jZKpGKgwy5LJTWwXqSD4jVWYDdnTKHlRYkaNB6SqsaQ"
            secret_key: "the_secret_key_or_null"
            account_id: "acc_01ca2p8jqans5aty5gj5etmjcf"
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"
            deleted_at: null
    AccessKeysResponseSchema:
      description: "The response schema for a list of access keys"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccessKeySchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "key"
                id: "key_01ce843mvg5fa1zpk5myy69h4q"
                access_key: "jZKpGKgwy5LJTWwXqSD4jVWYDdnTKHlRYkaNB6SqsaQ"
                secret_key: "the_secret_key_or_null"
                account_id: "acc_01ca2p8jqans5aty5gj5etmjcf"
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
                deleted_at: null
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true

    ######################################
    #           API KEY SCHEMAS          #
    ######################################
    APIKeySchema:
      description: "The object schema for an API key"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        key:
          type: string
        owner_app:
          type: string
        expired:
          type: boolean
        account_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
      required:
        - object
        - id
        - key
        - owner_app
        - expired
        - account_id
        - created_at
        - updated_at
        - deleted_at
    APIKeyResponseSchema:
      description: "The response schema for an API key"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/APIKeySchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "api_key"
            id: "api_01ce844d5w9e81snekr5kprvem"
            key: "jZKpGKgwy5LJTWwXqSD4jVWYDdnTKHlRYkaNB6SqsaQ"
            owner_app: "admin_api"
            expired: false
            account_id: "acc_01ca2p8jqans5aty5gj5etmjcf"
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"
            deleted_at: null
    APIKeysResponseSchema:
      description: "The response schema for a list of API keys"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIKeySchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "api_key"
                id: "api_01ce844d5w9e81snekr5kprvem"
                key: "jZKpGKgwy5LJTWwXqSD4jVWYDdnTKHlRYkaNB6SqsaQ"
                owner_app: "admin_api"
                expired: false
                account_id: "acc_01ca2p8jqans5aty5gj5etmjcf"
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
                deleted_at: null
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true

  requestBodies:
    ######################################
    #       SESSION REQUEST BODIES       #
    ######################################
    LoginBody:
      description: The parameters to use for logging in a user
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
            required:
              - email
              - password
            example:
              email: "test@example.com"
              password: "the_password"
    SwitchAccountBody:
      description: The parameters to use for switching the current account
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              account_id:
                type: string
            required:
              - account_id
            example:
              accound_id: "the_account_id"
    ResetPasswordBody:
      description: The parameters to use for requesting a reset password
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              email:
                type: string
                format: email
              redirect_url:
                type: string
            required:
              - email
              - redirect_url
            example:
              email: "test@example.com"
              redirect_url: "https://example.com/admin/update_password?email={email}&token={token}"
    UpdatePasswordBody:
      description: The parameters to use for reseting a password
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              email:
                type: string
                format: email
              token:
                type: string
              password:
                type: string
                format: password
              password_confirmation:
                type: string
                format: password
            required:
              - email
              - redirect_url
              - password
              - password_confirmation
            example:
              email: "test@example.com"
              token: "26736ca1-43a0-442b-803e-76220cd3cb1d"
              password: "nZi9Enc5$l#"
              password_confirmation: "nZi9Enc5$l#"

    ######################################
    #               TOKEN BODIES         #
    ######################################
    TokenAllBody:
      description: The parameters to use for listing the tokens
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "field_name"
              sort_dir: "asc"
    TokenGetBody:
      description: The parameters to use for retrieving a specific token by its id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "tok_abc_01cbfge9qhmsdbjyb7a8e8pxt3"
    TokenStatsBody:
      description: The parameters to use for retrieving the stats of a token
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "tok_abc_01cbfge9qhmsdbjyb7a8e8pxt3"
    # Request body for creating a token
    TokenCreateBody:
      description: The parameters to create a token. Note that if amount is specified, the token will be minted automatically.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              name:
                type: string
              symbol:
                type: string
              description:
                type: string
              subunit_to_unit:
                type: integer
              amount:
                type: integer
              iso_code:
                type: string
              short_symbol:
                type: string
              subunit:
                type: string
              symbol_first:
                type: boolean
              html_entity:
                type: string
              iso_numeric:
                type: string
              smallest_denomination:
                type: integer
              metadata:
                type: object
              encrypted_metadata:
                type: object
            required:
              - name
              - symbol
              - description
              - subunit_to_unit
            example:
              symbol: "BTC"
              name: "Bitcoin"
              description: "desc"
              subunit_to_unit: 100
    # Request body for updating a token
    TokenUpdateBody:
      description: The parameters to update a token.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
              iso_code:
                type: string
              short_symbol:
                type: string
              symbol_first:
                type: boolean
              html_entity:
                type: string
              iso_numeric:
                type: string
              metadata:
                type: object
              encrypted_metadata:
                type: object
            required:
              - id
            example:
              id: "tok_ABC_01ce846km1syzwezxfmgdn7dt7"
              name: "Bitcoin v2"
              description: "an awesome updated description"
    # Request body for minting a token
    TokenMintBody:
      description: The parameters to create a token. Note that if amount is specified, the token will be minted automatically.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
              amount:
                type: integer
            required:
              - id
              - amount
            example:
              id: "tok_ABC_01ce846km1syzwezxfmgdn7dt7"
              amount: 1000
    ######################################
    #               MINT BODIES          #
    ######################################
    TokenGetMintsBody:
      description: The parameters to use for listing the mints for a token
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
              id:
                type: string
            example:
              id: "tok_ABC_01ce846km1syzwezxfmgdn7dt7"
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "field_name"
              sort_dir: "asc"

    ######################################
    #        EXCHANGE PAIR BODIES        #
    ######################################
    ExchangePairAllBody:
      description: The parameters to use for listing the exchange pairs
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "field_name"
              sort_dir: "asc"
    ExchangePairGetBody:
      description: The parameters to use for retrieving a specific exchange pair by its id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "exg_01cgvppyrz2pprj6s0zmc26p2p"
    ExchangePairCreateBody:
        description: The parameters to create an exchange pair.
        required: true
        content:
          application/vnd.omisego.v1+json:
            schema:
              properties:
                from_token_id:
                  type: string
                to_token_id:
                  type: string
                rate:
                  type: number
                sync_opposite:
                  type: boolean
              required:
                - from_token_id
                - to_token_id
                - rate
              example:
                from_token_id: "tok_ETH_01cbfge9qhmsdbjyb7a8e8pxt3"
                to_token_id: "tok_OMG_01cgvrqbfpa23ehkmrtqpbsyyp"
                rate: 0.017
                sync_opposite: false
    ExchangePairUpdateBody:
        description: The parameters to update an exchange pair.
        required: true
        content:
          application/vnd.omisego.v1+json:
            schema:
              properties:
                id:
                  type: string
                rate:
                  type: number
              required:
                - id
              example:
                id: "exg_01cgvppyrz2pprj6s0zmc26p2p"
                rate: 0.099
    ExchangePairDeleteBody:
        description: The parameters to delete an exchange pair.
        required: true
        content:
          application/vnd.omisego.v1+json:
            schema:
              properties:
                id:
                  type: string
              required:
                - id
              example:
                id: "exg_01cgvppyrz2pprj6s0zmc26p2p"

    ###########################################
    #         CATEGORY REQUEST BODIES         #
    ###########################################
    CategoryAllBody:
      description: The parameters to use for listing the categories
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "field_name"
              sort_dir: "asc"
    CategoryGetBody:
      description: The parameters to use for retrieving a specific category
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "cat_01ce30qdajwb7gdecq0ebn3twq"
    CategoryCreateBody:
      description: The parameters to use for creating a new category.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              name:
                type: string
              description:
                type: string
              account_ids:
                type: array
                items:
                  type: string
            required:
              - name
              - description
              - account_ids
            example:
              name: "Name of category"
              description: "The category description"
              account_ids: ["acc_01ca26pkge49aabzd6k6mshn0y"]
    CategoryUpdateBody:
      description: The parameters to use for updating an account. Only the provided fields are updated.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
              account_ids:
                type: array
                items:
                  type: string
            required:
              - id
            example:
              id: "cat_01ce30qdajwb7gdecq0ebn3twq"
              name: "Name to Update"
              description: "New category description"
              account_ids: ["acc_01ca26pkge49aabzd6k6mshn0y"]
    CategoryDeleteBody:
      description: The parameters to use for deleting an category.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "cat_01ce30qdajwb7gdecq0ebn3twq"

    ###########################################
    #          ACCOUNT REQUEST BODIES         #
    ###########################################
    AccountAllBody:
      description: The parameters to use for listing the accounts
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "field_name"
              sort_dir: "asc"
    AccountGetBody:
      description: The parameters to use for retrieving a specific account by its id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "acc_01ca2p8jqans5aty5gj5etmjcf"
    AccountCreateBody:
      description: The parameters to use for creating a new account.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              name:
                type: string
              description:
                type: string
              parent_id:
                type: string
              category_ids:
                type: array
                items:
                  type: string
              metadata:
                type: object
              encrypted_metadata:
                type: object
            required:
              - name
            example:
              name: "Account Name"
              description: "The account description"
              parent_id: "acc_01ca26pkge49aabzd6k6mshn0y"
              category_ids: []
              metadata: {}
              encrypted_metadata: {}
    AccountUpdateBody:
      description: The parameters to use for updating an account. Only the provided fields are updated.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
              category_ids:
                type: array
                items:
                  type: string
              metadata:
                type: object
              encrypted_metadata:
                type: object
            required:
              - id
            example:
              id: "acc_01ca2p8jqans5aty5gj5etmjcf"
              name: "Account Name"
              description: "The account description"
              category_ids: []
              metadata: {}
              encrypted_metadata: {}
    AccountListBodyWithOwned:
      description: The parameters to use for listing an account's owned data
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
              owned:
                type: boolean
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            required:
              - id
            example:
              id: "acc_01ca2p8jqans5aty5gj5etmjcf"
              owned: true
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "field_name"
              sort_dir: "asc"
    AccountListBody:
      description: The parameters to use for listing an account's data
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            required:
              - id
            example:
              id: "acc_01ca2p8jqans5aty5gj5etmjcf"
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "field_name"
              sort_dir: "asc"
    AccountAssignUserBody:
      description: The parameters to use for assigning a user to an account
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            oneOf:
              - properties:
                  user_id:
                    type: string
                  account_id:
                    type: string
                  role_name:
                    type: string
                  redirect_url:
                    type: string
                required:
                  - user_id
                  - account_id
                  - role_name
                  - redirect_url
                example:
                  user_id: "usr_01ce83q2zw7zk1dqr79t22zr1v"
                  account_id: "acc_01ca2p8jqans5aty5gj5etmjcf"
                  role_name: "admin"
                  redirect_url: "https://domain/redirect_path?email={email}&token={token}"
              - properties:
                  email:
                    type: string
                  account_id:
                    type: string
                  role_name:
                    type: string
                required:
                  - email
                  - account_id
                  - role_name
                  - redirect_url
                example:
                  email: "user@example.com"
                  account_id: "acc_01ca2p8jqans5aty5gj5etmjcf"
                  role_name: "admin"
                  redirect_url: "https://domain/redirect_path?email={email}&token={token}"
            example:
              account_id: "acc_01ca2p8jqans5aty5gj5etmjcf"
              user_id: "usr_01ce83q2zw7zk1dqr79t22zr1v"
              role_name: "admin"
              redirect_url: "https://domain/redirect_path?email={email}&token={token}"
    AccountUnassignUserBody:
      description: The parameters to use for unassigning a user from an account
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              user_id:
                type: string
              account_id:
                type: string
            required:
              - user_id
              - account_id
            example:
              account_id: "acc_01ca2p8jqans5aty5gj5etmjcf"
              user_id: "usr_01ce83q2zw7zk1dqr79t22zr1v"
    AccountUploadBody:
      description: The parameters to use for uploading an account's avatar. Only supports .jpg, .jpeg, .gif and .png.
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            properties:
              id:
                type: string
              avatar:
                type: string
                format: binary
            required:
              - id
              - avatar
            example:
              id: "acc_01ca2p8jqans5aty5gj5etmjcf"
              avatar: "/path/to/file"

    ######################################
    #         ADMIN REQUEST BODIES       #
    ######################################
    AdminAllBody:
      description: The parameters to use for listing the users
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "field_name"
              sort_dir: "asc"
    AdminGetBody:
      description: The parameters to use for retrieving a specific user by its id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "usr_01ce83q2zw7zk1dqr79t22zr1v"
    InviteAcceptBody:
      description: The parameters to use for accepting an invite
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              email:
                type: string
              token:
                type: string
              password:
                type: string
              password_confirmation:
                type: string
            required:
              - email
              - token
              - password
              - password_confirmation
            example:
              email: "example@omise.co"
              token: "dmWEOiEvlPfEpb2XPEkNkNYR4xEqNuf25E9hqBYwvzg"
              password: "user_provided_password"
              password_confirmation: "user_provided_password"
    AdminUpdateBody:
      description: The parameters to use for updating a user
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              email:
                type: string
              metadata:
                type: object
              encrypted_metadata:
                type: object
            example:
              email: "example@omise.co"
              metadata: {}
              encrypted_metadata: {}
    AdminUploadBody:
      description: The parameters to use for uploading an admin's avatar. Only supports .jpg, .jpeg, .gif and .png.
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            properties:
              id:
                type: string
              avatar:
                type: string
                format: binary
            required:
              - id
              - avatar
            example:
              id: "usr_01ce83xvrsh8bzpctq3wqbprf8"
              avatar: "/path/to/file"

    ######################################
    #         USER REQUEST BODIES        #
    ######################################
    UserAllBody:
      description: The parameters to use for listing the users
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "field_name"
              sort_dir: "asc"
    UserGetBody:
      description: The parameters to use for retrieving a specific user by its id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "usr_01ce83q2zw7zk1dqr79t22zr1v"
    UserBody:
      description: The parameters to use for creating or updating a user
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              provider_user_id:
                type: string
              username:
                type: string
              metadata:
                type: object
              encrypted_metadata:
                type: object
            required:
              - provider_user_id
              - username
            example:
              provider_user_id: "wijf-fbancomw-dqwjudb"
              username: "thibault@omise.co"
              metadata: {"first_name": "Thibault", "last_name": "Denizet"}
              encrypted_metadata: {}
    UserIdentifierBody:
      description: The parameters to use for retrieving a specific user by its id or provider_user_id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            oneOf:
              - properties:
                  id:
                    type: string
                required:
                  - id
              - properties:
                  provider_user_id:
                    type: string
                required:
                  - provider_user_id
            example:
              id: "usr_01ce83q2zw7zk1dqr79t22zr1v"
    UserIdentifierWithFiltersBody:
      description: The parameters to use for retrieving a specific user by its id or provider_user_id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            example:
              provider_user_id: "provider_user_id01"
              page: 1
              per_page: 10
              sort_by: "field_name"
              sort_dir: "asc"
            oneOf:
              - properties:
                  id:
                    type: string
                  page:
                    type: integer
                    minimum: 1
                  per_page:
                    type: integer
                    minimum: 1
                  sort_by:
                    type: string
                  sort_dir:
                    type: string
                    enum: ["asc", "desc"]
                required:
                  - id
              - properties:
                  provider_user_id:
                    type: string
                  page:
                    type: integer
                    minimum: 1
                  per_page:
                    type: integer
                    minimum: 1
                  sort_by:
                    type: string
                  sort_dir:
                    type: string
                    enum: ["asc", "desc"]
                required:
                  - provider_user_id
    LogoutUserBody:
      description: The parameters to use to log out a user
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              auth_token:
                type: string
            required:
              - auth_token
            example:
              auth_token: "atk_01ce83q2zw7zk1dqr79t22zr1v"

    ######################################
    #             WALLET BODIES          #
    ######################################
    WalletAllBody:
      description: The parameters to use for listing the wallets
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "field_name"
              sort_dir: "asc"
    WalletAccountBody:
      description: The parameters to use for listing the wallets for an account
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              id: "acc_01ca2p8jqans5aty5gj5etmjcf"
              page: 1
              per_page: 10
              sort_by: "field_name"
              sort_dir: "asc"
    WalletUserBody:
      description: The parameters to use for listing the wallets for a user
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              id: usr_01cc02x0v98qcctvycfx4vsk8x
              page: 1
              per_page: 10
              sort_by: "field_name"
              sort_dir: "asc"
    WalletGetBody:
      description: The parameters to use for retrieving a wallet by its address
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              address:
                type: string
            required:
              - address
            example:
              address: "ce3982f5-4a27-498d-a91b-7bb2e2a8d3d1"
    WalletCreateBody:
      description: The parameters to use for creating a wallet
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            example:
              name: "My Wallet"
              identifier: "secondary"
              user_id: "usr_01cbfg6v9thrc3sd9m1v4gazjv"
            oneOf:
              - properties:
                  name:
                    type: string
                  identifier:
                    type: string
                    enum: ["burn", "secondary"]
                  provider_user_id:
                    type: string
                required:
                  - name
                  - identifier
                  - provider_user_id

              - properties:
                  name:
                    type: string
                  identifier:
                    type: string
                    enum: ["burn", "secondary"]
                  user_id:
                    type: string
                required:
                  - name
                  - identifier
                  - user_id

              - properties:
                  name:
                    type: string
                  identifier:
                    type: string
                    enum: ["burn", "secondary"]
                  account_id:
                    type: string
                required:
                  - name
                  - identifier
                  - account_id

    ######################################
    #     TRANSACTION REQUEST BODIES     #
    ######################################
    TransactionAllBody:
      description: The parameters to use for listing the transactions
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "created_at"
              sort_dir: "desc"

    TransactionGetBody:
      description: The parameters to use for retrieving a specific transaction by its id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "txn_01ce83x8w4db56f3fcjy4n4qpc"

    TransactionCreateBody:
      description: The parameters for making a transaction from an address to another.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              idempotency_token:
                type: string
              from_address:
                type: string
              to_address:
                type: string
              from_account_id:
                type: string
              to_account_id:
                type: string
              from_user_id:
                type: string
              to_user_id:
                type: string
              from_provider_user_id:
                type: string
              to_provider_user_id:
                type: string
              from_token_id:
                type: string
              to_token_id:
                type: string
              token_id:
                type: string
              from_amount:
                type: integer
              to_amount:
                type: integer
              amount:
                type: integer
              exchange_account_id:
                type: string
              exchange_wallet_address:
                type: string
              metadata:
                type: object
              encrypted_metadata:
                type: object
            required:
              - idempotency_token
              - from_address
              - to_address
              - token_id
              - amount
            example:
              idempotency_token: "2345"
              from_address: "81e75f46-ee14-4e4c-a1e5-cddcb26dce9c"
              to_address: "4aa07691-2f99-4cb1-b36c-50763e2d2ba8"
              token_id: "tok_BTC_01cbffybmtbbb449r05zgfct2h"
              amount: 100
              metadata: {}
              encrypted_metadata: {}
    TransactionCalculateBody:
      description: The parameters for calculating transaction amounts.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              from_amount:
                type: integer
              from_token_id:
                type: string
              to_amount:
                type: integer
              to_token_id:
                type: string
            required:
              - from_token_id
              - to_token_id
            example:
              from_token_id: "tok_ETH_01cbfge9qhmsdbjyb7a8e8pxt3"
              to_token_id: "tok_OMG_01cbffwvj6ma9a9gg1tb24880q"
              from_amount: 100
    CreateTransactionRequestBody:
      description: Create a transaction request using the specified values. That request can then be consumed using a different endpoint to create a transaction from that request.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              type:
                type: string
                enum:
                  - send
                  - receive
              token_id:
                type: string
                description: "The token ID to use for the transaction."
              amount:
                type: integer
                default: null
                description:
                  "The amount to transfer. If not specified, the consumption will need to set
                   the amount."
              correlation_id:
                type: string
                default: null
                description: "Optional unique identifier to tie a request with your system."
              account_id:
                type: string
                default: The owner of the given address.
              provider_user_id:
                type: string
                default: The owner of the given address.
              address:
                type: string
                description:
                  "If not specified, the current user's primary wallet will be used.
                   If specified, it needs to be one of the account's or user's addresses."
              require_confirmation:
                type: boolean
                default: false
                description:
                  "Indicates if a consumption of the created request needs to be approved before
                  being processed."
              max_consumptions:
                type: integer
                default: null
                description:
                  "The number of times this created request can be consumed."
              max_consumptions_per_user:
                type: integer
                default: null
                description:
                  "The maximum number of times a user can consume the request."
              consumption_lifetime:
                type: integer
                default: null
                description:
                  "The lifetime in milliseconds of how long a consumption can stay
                   'pending' before being expired. If a consumption is not approved before its
                   expiration date, it will become invalid and be cancelled. This property
                   can be used to avoid stale consumptions blocking the 'max_consumptions' count."
              expiration_date:
                type: string
                default: null
                description:
                  "The datetime at which the created request should expire (no one will be
                   able to consume it anymore). The format is yyyy-MM-dd'T'HH:mm:ssZZZZZ."
              allow_amount_override:
                type: boolean
                default: true
                description:
                  "Defines if the amount set in the created request can be overriden in a
                   consumption. Cannot be set to true if the amount property is not set at
                   creation"
              metadata:
                type: object
                default: {}
              encrypted_metadata:
                type: object
                default: {}
            required:
              - type
              - token_id
            example:
              type: "send"
              token_id: "tok_OMG_01cbffwvj6ma9a9gg1tb24880q"
              amount: 100
              correlation_id: "123"
              address: "2ae52683-68d8-4af6-94d7-5ed4c34ecf1a"
    TransactionRequestAllBody:
      description: The parameters to use for listing the transaction requests
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              search_terms:
                type: object
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              search_terms: {}
              sort_by: "created_at"
              sort_dir: "desc"
    GetTransactionRequestBody:
      description: Get a transaction request using the specified ID.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              formatted_id:
                type: string
            example:
              formatted_id: "data|txr_01cbfgc8cmmyzy1cfzpqwme3ey"
    ConsumeTransactionRequestBody:
      description: Consume a transaction request using the specified values.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              idempotency_token:
                type: string
              formatted_transaction_request_id:
                type: string
              correlation_id:
                type: string
              amount:
                type: integer
              token_id:
                type: string
              account_id:
                type: string
                default: The owner of the given address.
              provider_user_id:
                type: string
                default: The owner of the given address.
              address:
                type: string
                description:
                  "If not specified, the current user's primary wallet will be used.
                   If specified, it needs to be one of the account's or user's addresses."
              metadata:
                type: object
              encrypted_metadata:
                type: object
            required:
              - idempotency_token
              - formatted_transaction_request_id
            example:
              idempotency_token: "32435"
              formatted_transaction_request_id: "txr_01cbfgcts5kqfgpqxcxn71rnbs"
              correlation_id: "123"
              token_id: "tok_OMG_01cbffwvj6ma9a9gg1tb24880q"
              amount: 100
              provider_user_id: "provider_user_id01"
              address: "2ae52683-68d8-4af6-94d7-5ed4c34ecf1a"
              metadata: {}
              encrypted_metadata: {}
    TransactionConsumptionAllBody:
      description: The parameters to use for listing the consumptions
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              search_terms:
                type: object
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "created_at"
              sort_dir: "desc"
    TransactionConsumptionAllForUserBody:
      description: The parameters to use for listing the consumptions for a user
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_terms:
                type: object
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            required:
              - id
            example:
              id: "usr_02cbfg6v9thrc3sd9m1v4gazjv"
              page: 1
              per_page: 10
              search_terms: {}
              sort_by: "created_at"
              sort_dir: "desc"
    TransactionConsumptionAllForWalletBody:
      description: The parameters to use for listing the consumptions for a wallet
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              address:
                type: string
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_terms:
                type: object
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            required:
              - address
            example:
              address: "232454354"
              page: 1
              per_page: 10
              search_terms: {}
              sort_by: "created_at"
              sort_dir: "desc"
    TransactionConsumptionAllForTransactionRequestBody:
      description: The parameters to use for listing the consumptions for a transaction request
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              formatted_transaction_request_id:
                type: string
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_terms:
                type: object
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            required:
              - formatted_transaction_request_id
            example:
              formatted_transaction_request_id: "txr_01cbfg8mafdnbthgb9e68nd9y9"
              page: 1
              per_page: 10
              search_terms: {}
              sort_by: "created_at"
              sort_dir: "desc"
    GetConsumptionRequestBody:
      description: Get a consumption using the specified ID.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "txc_01abfg5m2ee06kzm8tbysfmmw5"
    ConsumptionConfirmationRequestBody:
      description: Approve or reject a consumption using the specified ID.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "txn_01cbfg5m2ee06kzm8tbysfmmw5"

    ######################################
    #      ACCESS KEY REQUEST BODIES     #
    ######################################
    AccessKeyAllBody:
      description: The parameters to use for listing the access keys
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "created_at"
              sort_dir: "desc"
    AccessKeyUpdateBody:
      description: The parameters to use for updating an access key
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
              expired:
                type: boolean
            required:
              - id
            example:
              id: "key_01ce83yphmq6vt4qnmn3ykwcw6"
              expired: true
    AccessKeyDeleteBody:
      description: The parameters to use for deleting an access key
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            oneOf:
              - properties:
                  id:
                    type: string
                required:
                  - id
                example:
                  id: "key_01ce83yphmq6vt4qnmn3ykwcw6"
              - properties:
                  access_key:
                    type: string
                required:
                  - access_key
                example:
                  access_key: "jZKpGKgwy5LJTWwXqSD4jVWYDdnTKHlRYkaNB6SqsaQ"
            example:
              id: "key_01ce83yphmq6vt4qnmn3ykwcw6"

    ######################################
    #       API KEY REQUEST BODIES       #
    ######################################
    APIKeyAllBody:
      description: The parameters to use for listing the API keys
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: ""
              sort_by: "created_at"
              sort_dir: "asc"
    APIKeyUpdateBody:
      description: The parameters to use for updating an API key
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
              expired:
                type: boolean
            required:
              - id
              - expired
            example:
              id: "api_01ce83yphmq6vt4qnmn3ykwcw6"
              expired: true
    APIKeyDeleteBody:
      description: The parameters to use for deleting an API key
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "api_01ce83yphmq6vt4qnmn3ykwcw6"

  ######################################
  #           REQUEST HEADERS          #
  ######################################
  parameters:
    IdempotencyToken:
      in: header
      name: Idempotency-Token
      description: The idempotency token for the request
      required: true
      schema:
        type: string

  ######################################
  #          SECURITY SCHEMES          #
  ######################################
  securitySchemes:
    AdminAuth:
      type: apiKey
      in: header
      name: Authorization
      description: OMGAdmin Base64(user_id:authentication_token)
    ProviderAuth:
      type: apiKey
      in: header
      name: Authorization
      description: OMGProvider Base64(access_key:secret_key)

  responses:
    ######################################
    #          SESSION RESPONSES         #
    ######################################
    AuthenticationTokenResponse:
      description: "Authentication token response"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AuthenticationTokenResponseSchema'

    ######################################
    #           TOKEN RESPONSES          #
    ######################################
    TokenResponse:
      description: "Returns a single tokens"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/TokenResponseSchema'
    TokenStatsResponse:
      description: "Returns the stats for a single token"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/TokenStatsResponseSchema'
    TokensResponse:
      description: "Returns a list of tokens"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/TokensResponseSchema'

    ######################################
    #            MINT RESPONSES          #
    ######################################
    MintsResponse:
      description: "Returns a list of mints"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/MintsResponseSchema'

    ######################################
    #       EXCHANGE PAIR RESPONSES      #
    ######################################
    ExchangePairResponse:
      description: "Returns a single exchange pair"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/ExchangePairResponseSchema'
    ExchangePairsResponse:
      description: "Returns a list of exchange pairs"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/ExchangePairsResponseSchema'

    ######################################
    #          CATEGORY RESPONSES        #
    ######################################
    CategoryResponse:
      description: "Returns a single category"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/CategoryResponseSchema'
    CategoriesResponse:
      description: "Returns a list of categories"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/CategoriesResponseSchema'

    ######################################
    #          ACCOUNT RESPONSES         #
    ######################################
    AccountResponse:
      description: "Returns a single account"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AccountResponseSchema'
    AccountsResponse:
      description: "Returns a list of accounts"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AccountsResponseSchema'

    ######################################
    #            USER RESPONSES          #
    ######################################
    UserResponse:
      description: "Returns a single user"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/UserResponseSchema'
    MembersResponse:
      description: "Returns a list of members"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/MembersResponseSchema'
    UsersResponse:
      description: "Returns a list of users"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/UsersResponseSchema'

    ######################################
    #          WALLET RESPONSES          #
    ######################################
    WalletResponse:
      description: "Returns a single wallet"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/WalletResponseSchema'
    WalletsResponse:
      description: "Returns a list of wallets"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/WalletsResponseSchema'

    ######################################
    #        TRANSACTION RESPONSES       #
    ######################################
    TransactionResponse:
      description: "Returns a single transaction"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/TransactionResponseSchema'
    TransactionsResponse:
      description: "Returns a list of transactions"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/TransactionsResponseSchema'
    TransactionCalculationResponse:
      description: "Returns a transaction calculation"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/TransactionCalculationResponseSchema'

    ######################################
    #   TRANSACTION REQUEST RESPONSES    #
    ######################################
    TransactionRequestsResponse:
      description: "Returns a list of transaction requests"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/TransactionRequestsResponseSchema'
    # Schema for transaction request response body
    TransactionRequestResponse:
      description: Transaction request response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/TransactionRequestSchema'

    ######################################
    # TRANSACTION CONSUMPTIONS RESPONSES #
    ######################################
    TransactionConsumptionsResponse:
      description: "Returns a list of transaction consumptions"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/TransactionConsumptionsResponseSchema'
    # Schema for transaction request response body
    TransactionConsumptionResponse:
      description: "Transaction request consumption response"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/TransactionConsumptionSchema'

    ######################################
    #          SETTING RESPONSES         #
    ######################################
    SettingResponse:
      description: "Returns a list of settings"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/SettingResponse'

    ######################################
    #         ADMIN USER RESPONSES       #
    ######################################
    AdminResponse:
      description: "Returns a single admin panel user"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AdminResponseSchema'
    AdminsResponse:
      description: "Returns a list of admin panel users"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AdminsResponseSchema'

    ######################################
    #         ACCESS KEY RESPONSES       #
    ######################################
    AccessKeyResponse:
      description: "Returns a single access key"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AccessKeyResponseSchema'
    AccessKeysResponse:
      description: "Returns a list of access keys"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AccessKeysResponseSchema'

    ######################################
    #          API KEY RESPONSES         #
    ######################################
    APIKeyResponse:
      description: "Returns a single API key"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/APIKeyResponseSchema'
    APIKeysResponse:
      description: "Returns a list of API keys"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/APIKeysResponseSchema'

    ######################################
    #       MISCELLANEOUS RESPONSES      #
    ######################################
    EmptyResponse:
      description: "Returns an empty response"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/BaseResponseSchema'
    InternalServerError:
      description: "Returns an internal server error"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/ErrorResponseSchema'
