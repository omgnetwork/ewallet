openapi: 3.0.0
info:
  version: "1.0.0"
  title: eWallet Admin API
  description: >
    This is the API design for eWallet Admin.


    All calls must be user-authenticated. That is, the client must first authenticate with the API using the user's email and password. On successful authentication, the API returns an authentication token (i.e. `authentication_token`).


    Once a valid `authentication_token` is received, use the given auth token to make subsequent calls to the API via HTTP header
    `Authorization=OMGAdmin Base64(api_key:authentication_token)`.


    Due to HTTP-RPC nature, the API will always return a `200` HTTP status, including on errors.
    Only in case of an internal server error that `500` will be returned.


    Error codes are defined in  [eWallet API Error Codes](https://docs.google.com/a/omise.co/spreadsheets/d/1yq5IIoXQYV_ZlUVejAnhB8lVra2rxm56EnyjfMqFcU8/edit?usp=sharing).
  contact:
    name: OmiseGO
    email: unnawut@omise.co
  license:
    name: License to be defined
    url: 'https://omg.omise.co/'
tags:
  - name: Session
    description: These are the endpoints related to the session tokens.
  - name: Minted Token
    description: These are the endpoints related to minted tokens.
  - name: Account
    description: These are the endpoints related to the account.
  - name: User
    description: These are the endpoints related to users.
  - name: Admin
    description: These are the endpoints related to admins.
paths:
  ############################
  #         SESSION          #
  ############################
  # Endpoint to login a user.
  /login:
    post:
      tags:
        - Session
      summary: Login an existing user using email and password.
      operationId: login
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/ClientAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/LoginBody'
      responses:
        '200':
          $ref: "#/components/responses/AuthenticationTokenResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to logout a user. (invalidate its authentication_token)
  /logout:
    post:
      tags:
        - Session
      summary: Expires a user's authentication_token.
      operationId: logout
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  ############################
  #      MINTED TOKENS       #
  ############################
  /minted_token.all:
    post:
      tags:
        - Minted Token
      summary: Get the list of minted tokens
      operationId: token_all
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/MintedTokenAllBody'
      responses:
        '200':
          $ref: "#/components/responses/MintedTokensResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /minted_token.get:
    post:
      tags:
        - Minted Token
      summary: Get a specific minted token
      operationId: token_get
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/MintedTokenGetBody'
      responses:
        '200':
          $ref: "#/components/responses/MintedTokenResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  ############################
  #         ACCOUNTS         #
  ############################
  # Endpoint to get info about the accounts
  /account.all:
    post:
      tags:
        - Account
      summary: Get the list of accounts
      operationId: account_all
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/AccountAllBody'
      responses:
        '200':
          $ref: "#/components/responses/AccountsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to get info about the accounts
  /account.get:
    post:
      tags:
        - Account
      summary: Get a specific account
      operationId: account_get
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/AccountGetBody'
      responses:
        '200':
          $ref: "#/components/responses/AccountResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to create a new account
  /account.create:
    post:
      tags:
        - Account
      summary: Create a new account
      operationId: account_create
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/AccountCreateBody'
      responses:
        '200':
          $ref: "#/components/responses/AccountResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to update an account
  /account.update:
    post:
      tags:
        - Account
      summary: Update an account
      operationId: account_update
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/AccountUpdateBody'
      responses:
        '200':
          $ref: "#/components/responses/AccountResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to assign user to an account
  /account.assign_user:
    post:
      tags:
        - Account
      summary: Assigns a user to an account with a role
      operationId: account_assign_user
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/AccountAssignUserBody'
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to unassign user to an account
  /account.unassign_user:
    post:
      tags:
        - Account
      summary: Unassigns a user from an account
      operationId: account_unassign_user
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/AccountUnassignUserBody'
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  ############################
  #           USERS          #
  ############################
  /user.all:
    post:
      tags:
        - User
      summary: Get the list of users
      operationId: user_all
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/UserAllBody'
      responses:
        '200':
          $ref: "#/components/responses/UsersResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /user.get:
    post:
      tags:
        - User
      summary: Get a specific user
      operationId: user_get
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/UserGetBody'
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /me.get:
    post:
      tags:
        - User
      summary: Get the user corresponding to the provided authentication header.
      operationId: me_get
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  ############################
  #          ADMINS          #
  ############################
  /admin.all:
    post:
      tags:
        - Admin
      summary: Get the list of admins
      operationId: admin_all
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/AdminAllBody'
      responses:
        '200':
          $ref: "#/components/responses/AdminsResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /admin.get:
    post:
      tags:
        - Admin
      summary: Get a specific admin
      operationId: admin_get
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/UserAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/AdminGetBody'
      responses:
        '200':
          $ref: "#/components/responses/AdminResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

# Components are objects that are reusable within this API spec.
# They do not have any effect on the API unless they are
# referenced from properties outside the component.
components:
  schemas:
    # Schema for success response body
    BaseResponseSchema:
      type: object
      properties:
        version:
          type: string
        success:
          type: boolean
        data:
          type: object
      required:
        - version
        - success
        - data
      example:
        version: "1"
        success: true
        data: {}
    # Schema for authentication token object
    AuthenticationTokenSchema:
      type: object
      properties:
        object:
          type: string
        authentication_token:
          type: string
        user_id:
          type: string
          format: uuid
      required:
        - object
        - authentication_token
        - user_id
    # Schema for authentication token body response
    AuthenticationTokenResponseSchema:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/AuthenticationTokenSchema'
        required:
          - data
        example:
          data:
            object: "authentication_token"
            authentication_token: "azJRj09l7jvR8KhTqUs3"
            user_id: "12345678-1234-1234-1234-123456789012"
    # Schema for an unpaginated list object
    UnpaginatedListSchema:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
      required:
        - object
        - data
      example:
        object: list
        data: []
    # Schema for a paginated list object
    PaginatedListSchema:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
        pagination:
          type: object
          properties:
            per_page:
              type: integer
              minimum: 1
            current_page:
              type: integer
              minimum: 1
            is_first_page:
              type: boolean
            is_last_page:
              type: boolean
          required:
            - per_page
            - current_page
            - is_first_page
            - is_last_page
      required:
        - object
        - data
        - pagination
      example:
        object: list
        data: []
        pagination:
          per_page: 10
          current_page: 1
          is_first_page: true
          is_last_page: true
    # Schema for token object
    MintedTokenSchema:
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        symbol:
          type: string
        name:
          type: string
        subunit_to_unit:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - object
        - id
        - symbol
        - name
        - subunit_to_unit
        - created_at
        - updated_at
    # Schema for token body response
    MintedTokenResponseSchema:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/MintedTokenSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "minted_token"
            id: "ABC:ce3982f5-4a27-498d-a91b-7bb2e2a8d3d1"
            symbol: "ABC"
            name: "ABC Point"
            subunit_to_unit: 100
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"
    # Schema for tokens body response
    MintedTokensResponseSchema:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MintedTokenSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "minted_token"
                id: "ABC:ce3982f5-4a27-498d-a91b-7bb2e2a8d3d1"
                symbol: "ABC"
                name: "ABC Point"
                subunit_to_unit: 100
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true
    # Schema for account object
    AccountSchema:
      type: object
      properties:
        object:
          type: string
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        master:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - object
        - id
        - name
        - master
        - created_at
        - updated_at
    # Schema for account body response
    AccountResponseSchema:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/AccountSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "account"
            id: "ce3982f5-4a27-498d-a91b-7bb2e2a8d3d1"
            name: "Account Name"
            description: "The account description"
            master: true
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"
    # Schema for accounts body response
    AccountsResponseSchema:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccountSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "account"
                id: "9bd32bec-082a-427e-8545-6922952cff35"
                name: "Account name"
                description: "The account description"
                master: true
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true
    # Schema for a user object
    UserSchema:
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        username:
          type: string
        provider_user_id:
          type: string
        email:
          type: string
          format: email
        metadata:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - object
        - id
        - metadata
        - created_at
        - updated_at
      example:
        object: "user"
        id: "cec34607-0761-4a59-8357-18963e42a1aa"
        provider_user_id: "wijf-fbancomw-dqwjudb"
        username: "johndoe"
        email: "johndoe@omise.co"
        metadata: {"first_name": "John", "last_name": "Doe"}
        created_at: "2018-01-01T00:00:00Z"
        updated_at: "2018-01-01T10:00:00Z"
    # Schema for user response body
    UserResponseSchema:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/UserSchema'
        required:
          - data
        example:
          data:
            object: "user"
            id: "cec34607-0761-4a59-8357-18963e42a1aa"
            provider_user_id: "wijf-fbancomw-dqwjudb"
            username: "johndoe"
            email: "johndoe@omise.co"
            metadata: {"first_name": "John", "last_name": "Doe"}
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"
    # Schema for users body response
    UsersResponseSchema:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "user"
                id: "cec34607-0761-4a59-8357-18963e42a1aa"
                provider_user_id: "wijf-fbancomw-dqwjudb"
                username: "johndoe"
                email: "johndoe@omise.co"
                metadata: {"first_name": "John", "last_name": "Doe"}
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true
    # Schema for admin response body
    AdminResponseSchema:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/UserSchema'
        required:
          - data
        example:
          data:
            object: "user"
            id: "cec34607-0761-4a59-8357-18963e42a1aa"
            provider_user_id: "wijf-fbancomw-dqwjudb"
            username: "johndoe"
            email: "johndoe@omise.co"
            metadata: {"first_name": "John", "last_name": "Doe"}
            created_at: "2018-01-01T00:00:00Z"
            updated_at: "2018-01-01T10:00:00Z"
    # Schema for admins body response
    AdminsResponseSchema:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/PaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSchema'
        required:
          - data
        example:
          version: "1"
          success: true
          data:
            object: "list"
            data:
              - object: "user"
                id: "cec34607-0761-4a59-8357-18963e42a1aa"
                provider_user_id: "wijf-fbancomw-dqwjudb"
                username: "johndoe"
                email: "johndoe@omise.co"
                metadata: {"first_name": "John", "last_name": "Doe"}
                created_at: "2018-01-01T00:00:00Z"
                updated_at: "2018-01-01T10:00:00Z"
            pagination:
              per_page: 10
              current_page: 1
              is_first_page: true
              is_last_page: true
    # Schema for an error object
    ErrorSchema:
      type: object
      properties:
        object:
          type: string
        code:
          type: string
        description:
          type: string
        messages:
          type: object
      required:
        - object
        - code
        - description
        - messages
      example:
        object: "error"
        code: "server:internal_server_error"
        description: "Something went wrong on the server"
        messages: {"error_key": "error_reason"}
    # Schema for error response body
    ErrorResponseSchema:
      allOf:
        - $ref: '#/components/schemas/BaseResponseSchema'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ErrorSchema'
          required:
            - data
          example:
            success: false
            data:
              object: "error"
              code: "server:internal_server_error"
              description: "Something went wrong on the server"
              messages: {"error_key":"error_reason"}
  requestBodies:
    # Request body for logging in
    LoginBody:
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
            required:
              - email
              - password
            example:
              email: "test@example.com"
              password: "the_password"
    # Request body for listing minted tokens
    MintedTokenAllBody:
      description: The parameters to use for listing the minted tokens
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: "text to search for"
              sort_by: "field_name"
              sort_dir: "asc"
    # Request body for getting a specific token
    MintedTokenGetBody:
      description: The parameters to use for retrieving a specific minted token by its id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
            required:
              - id
            example:
              id: "ABC:ce3982f5-4a27-498d-a91b-7bb2e2a8d3d1"
    # Request body for listing accounts
    AccountAllBody:
      description: The parameters to use for listing the accounts
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: "text to search for"
              sort_by: "field_name"
              sort_dir: "asc"
    # Request body for getting a specific account
    AccountGetBody:
      description: The parameters to use for retrieving a specific account by its id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
                format: uuid
            required:
              - id
            example:
              id: "ce3982f5-4a27-498d-a91b-7bb2e2a8d3d1"
    # Request body for creating a new account
    AccountCreateBody:
      description: The parameters to use for creating a new account
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              name:
                type: string
              description:
                type: string
              master:
                type: string
            required:
              - name
            example:
              name: "Account Name"
              description: "The account description"
              master: true
    # Request body for updating an account
    AccountUpdateBody:
      description: The parameters to use for updating an account
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
              description:
                type: string
              master:
                type: string
            required:
              - id
              - name
              - description
              - master
            example:
              id: "ce3982f5-4a27-498d-a91b-7bb2e2a8d3d1"
              name: "Account Name"
              description: "The account description"
              master: true
    # Request body for updating an account
    AccountAssignUserBody:
      description: The parameters to use for assigning a user to an account
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              user_id:
                type: string
                format: uuid
              account_id:
                type: string
                format: uuid
              role_name:
                type: string
            required:
              - user_id
              - account_id
              - role_name
            example:
              account_id: "ce3982f5-4a27-498d-a91b-7bb2e2a8d3d1"
              user_id: "582edb32-1b7e-46aa-95f2-e0b3f57d71d3"
              role_name: "admin"
    # Request body for updating an account
    AccountUnassignUserBody:
      description: The parameters to use for unassigning a user from an account
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              user_id:
                type: string
                format: uuid
              account_id:
                type: string
                format: uuid
            required:
              - user_id
              - account_id
            example:
              account_id: "ce3982f5-4a27-498d-a91b-7bb2e2a8d3d1"
              user_id: "582edb32-1b7e-46aa-95f2-e0b3f57d71d3"
    # Request body for listing users
    UserAllBody:
      description: The parameters to use for listing the users
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: "text to search for"
              sort_by: "field_name"
              sort_dir: "asc"
    # Request body for getting a specific user
    UserGetBody:
      description: The parameters to use for retrieving a specific user by its id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
                format: uuid
            required:
              - id
            example:
              id: "ce3982f5-4a27-498d-a91b-7bb2e2a8d3d1"
    # Request body for listing admins
    AdminAllBody:
      description: The parameters to use for listing the admins
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              page:
                type: integer
                minimum: 1
              per_page:
                type: integer
                minimum: 1
              search_term:
                type: string
              sort_by:
                type: string
              sort_dir:
                type: string
                enum: ["asc", "desc"]
            example:
              page: 1
              per_page: 10
              search_term: "text to search for"
              sort_by: "email"
              sort_dir: "asc"
    # Request body for getting a specific admin
    AdminGetBody:
      description: The parameters to use for retrieving a specific admin by its id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              id:
                type: string
                format: uuid
            required:
              - id
            example:
              id: "ce3982f5-4a27-498d-a91b-7bb2e2a8d3d1"

  parameters:
    # Headers
    ClientAuthorizationHeader:
      in: header
      name: Authorization
      description: OMGAdmin Base64(api_key_id:api_key)
      required: true
      schema:
        type: string
        format: byte
    UserAuthorizationHeader:
      in: header
      name: Authorization
      description: OMGAdmin Base64(api_key_id:api_key:user_id:authentication_token)
      required: true
      schema:
        type: string
        format: byte
  securitySchemes:
    AdminAuth:
      type: apiKey
      in: header
      name: Authorization
  responses:
    # Authentication token response
    AuthenticationTokenResponse:
      description: Authentication token response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AuthenticationTokenResponseSchema'
    # Minted Token response
    MintedTokenResponse:
      description: Minted Token response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/MintedTokenResponseSchema'
    # Minted Tokens response
    MintedTokensResponse:
      description: Minted Tokens response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/MintedTokensResponseSchema'
    # Account response
    AccountResponse:
      description: Account response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AccountResponseSchema'
    # Accounts response
    AccountsResponse:
      description: Accounts response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AccountsResponseSchema'
    # User response
    UserResponse:
      description: User response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/UserResponseSchema'
    # Users response
    UsersResponse:
      description: Users response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/UsersResponseSchema'
    # Admin response
    AdminResponse:
      description: Admin response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AdminResponseSchema'
    # Admins response
    AdminsResponse:
      description: Admins response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AdminsResponseSchema'
    # Empty
    EmptyResponse:
      description: Empty response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/BaseResponseSchema'
    # Response when there was an internal server error (should never happen)
    InternalServerError:
      description: Something went wrong on the server
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/ErrorResponseSchema'
