openapi: 3.0.0
info:
  version: "1.0.0"
  title: EWallet initial API
  description: >
    This is the initial API design for EWallet.
    It was made using an HTTP-RPC style, following the requirements defined in [this document](https://docs.google.com/a/omise.co/document/d/1jy7CDpkkVcCoMy9Dp3GFEOzcMYPfNhpvK8dJH9L6q-E/edit?usp=sharing).
    Two kinds of endpoints can be found in this document: the server endpoints and the client (mobile wallet) endpoints. Basically, all API calls that modify the database need to be done from the server for security purposes using an `ACCESS_KEY`/`SECRET_KEY` combo. Retrieval calls can be made from the client (considered unsafe, 'never trust the client') using an API key (which can be disabled from the admin panel) and an authentication token. All API calls will be authorized using the 'Authorization' HTTP header using the following format: For server -> `Authorization=OMGServer Base64(access_key:secret_key)`, for client -> `Authorization=OMGClient Base64(api_key:authentication_token)`. Error codes are defined in the following [doc](https://docs.google.com/a/omise.co/spreadsheets/d/1yq5IIoXQYV_ZlUVejAnhB8lVra2rxm56EnyjfMqFcU8/edit?usp=sharing). The API will always return a `200` HTTP status except if there was an internal server error, in that case, `500` will be returned.
  contact:
    name: OmiseGO
    email: mederic@omise.co
  license:
    name: License To define
    url: 'https://omg.omise.co/'
tags:
  - name: Session
    description: These are the endpoints related to the session tokens.
  - name: User
    description: These are the endpoints related to the user resource. A user is an entity uniquely identified by its provider_user_id which is the user id in the provider database.
  - name: Balance
    description: These are the endpoints related to the balances of a specific user. Balances are the representation of the amount of each token a user owns.
  - name: Setting
    description: These are the endpoints related to the global settings of the wallet.
paths:
  ############################
  #         SESSION          #
  ############################
  # Endpoint to login a user.
  /login:
    post:
      tags:
        - Session
      summary: Server - Login an existing user. The provider can call this to get an authentication token for a specific user.
      description: This is a server call only.
      operationId: login
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/ProviderIdBody'
      responses:
        '200':
          $ref: "#/components/responses/AuthenticationTokenResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to logout a user. (invalidate its authentication_token)
  /logout:
    post:
      tags:
        - Session
      summary: Client - Expires a user's authentication_token.
      description: This is a wallet call.
      operationId: logout
      security:
        - ClientAuth: []
      parameters:
        - $ref: "#/components/parameters/ClientAuthorizationHeader"
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  ############################
  #           USERS          #
  ############################
  # Endpoint to create a user.
  /user.create:
    post:
      tags:
        - User
      summary: Server - Create a new user
      description: This is a server call only.
      operationId: user_create
      security:
        - ServerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      parameters:
        - $ref: "#/components/parameters/ServerAuthorizationHeader"
        - $ref: "#/components/parameters/IdempotencyToken"
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to update a user.
  /user.update:
    post:
      tags:
        - User
      summary: Server - Update an existing user
      description: This is a server call only.
      operationId: user_update
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerAuthorizationHeader"
        - $ref: "#/components/parameters/IdempotencyToken"
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to get an existing user from its id
  /user.get:
    post:
      tags:
        - User
      summary: Server - Get an existing user. The provider can call this to get any user from its id.
      description: This is a server call only.
      operationId: user_get
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/ProviderIdBody'
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to get an exising user from its authentication_token (get my user)
  /me.get:
    post:
      tags:
        - User
      summary: Client - Get the user corresponding to the provided authentication token.
      description: This is a wallet call.
      operationId: me_get
      security:
        - ClientAuth: []
      parameters:
        - $ref: "#/components/parameters/ClientAuthorizationHeader"
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  ############################
  #          BALANCES        #
  ############################
  # Endpoint to get the balances of a specific user from its id
  /user.list_balances:
    post:
      tags:
        - Balance
      summary: Server - Get the balances of a user. The provider can call this to get the balances of any user from its id.
      description: This is a server call only.
      operationId: user_list_balances
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerAuthorizationHeader"
      requestBody:
        $ref: '#/components/requestBodies/ProviderIdBody'
      responses:
        '200':
          $ref: "#/components/responses/AddressesResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  #Endpoint to get the balances of a user from its authentication_token
  /me.list_balances:
    post:
      tags:
        - Balance
      summary: Client - Get the balances of a specific user. The client can call this to get the balances of the user corresponding to the authentication_token provided.
      description: This is a wallet call.
      operationId: me_list_balances
      security:
        - ClientAuth: []
      parameters:
        - $ref: "#/components/parameters/ClientAuthorizationHeader"
      responses:
        '200':
          $ref: "#/components/responses/AddressesResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  #Endpoint to credit an existing user balance
  /user.credit_balance:
    post:
      tags:
        - Balance
      summary: Server - Credit the balance of a user. The provider can call this to credit the balance of an existing user corresponding to the provider_user_id provided.
      description: This is a server call only.
      operationId: user_credit_balance
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerAuthorizationHeader"
        - $ref: "#/components/parameters/IdempotencyToken"
      requestBody:
        $ref: '#/components/requestBodies/BalanceAdjustmentBody'
      responses:
        '200':
          $ref: "#/components/responses/SingleAddressesResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to debit an existing user balance
  /user.debit_balance:
    post:
      tags:
        - Balance
      summary: Server - Debit the balance of a user. The provider can call this to debit the balance of an existing user corresponding to the provider_user_id provided.
      description: This is a server call only.
      operationId: user_debit_balance
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerAuthorizationHeader"
        - $ref: "#/components/parameters/IdempotencyToken"
      requestBody:
        $ref: '#/components/requestBodies/BalanceAdjustmentBody'
      responses:
        '200':
          $ref: "#/components/responses/SingleAddressesResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to transfer an amount between two balances
  /transfer:
    post:
      tags:
        - Balance
      summary: Server - Transfer the specified amount between two balances.
      description: This is a server call only.
      operationId: transfer
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerAuthorizationHeader"
        - $ref: "#/components/parameters/IdempotencyToken"
      requestBody:
        $ref: '#/components/requestBodies/TransferBody'
      responses:
        '200':
          $ref: "#/components/responses/MultipleAddressesResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  ############################
  #          SETTINGS        #
  ############################
  # Endpoint to get global settings by the provider server
  /get_settings:
    post:
      tags:
        - Setting
      summary: Server - Get the global settings.
      description: This is a server call only.
      operationId: get_settings
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/ServerAuthorizationHeader"
      responses:
        '200':
          $ref: "#/components/responses/SettingResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  # Endpoint to get global settings by the provider client
  /me.get_settings:
    post:
      tags:
        - Setting
      summary: Client - Get the global settings.
      description: This is a wallet call.
      operationId: me_get_settings
      security:
        - ClientAuth: []
      parameters:
        - $ref: "#/components/parameters/ClientAuthorizationHeader"
      responses:
        '200':
          $ref: "#/components/responses/SettingResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    # Schema for a user object
    UserSchema:
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        username:
          type: string
        provider_user_id:
          type: string
        metadata:
          type: object
      required:
        - object
        - id
        - username
        - provider_user_id
        - metadata
      example:
        object: "user"
        id: "cec34607-0761-4a59-8357-18963e42a1aa"
        provider_user_id: "wijf-fbancomw-dqwjudb"
        username: "thibault@omise.co"
        metadata: {"first_name": "Thibault", "last_name": "Denizet"}
    # Schema for an error object
    ErrorSchema:
      type: object
      properties:
        object:
          type: string
        code:
          type: string
        description:
          type: string
        messages:
          type: object
      required:
        - object
        - code
        - description
        - messages
      example:
        object: "error"
        code: "server:internal_server_error"
        description: "Something went wrong on the server"
        messages: {"error_key": "error_reason"}
    # Schema for a list object
    UnpaginatedListSchema:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
      required:
        - object
        - data
      example:
        object: list
    # Schema for success response body
    BaseResponseSchema:
      type: object
      properties:
        version:
          type: string
        success:
          type: boolean
        data:
          type: object
      required:
        - version
        - success
        - data
      example:
        version: "1"
        success: true
        data: {}
    # Schema for error response body
    ErrorResponseSchema:
      allOf:
        - $ref: '#/components/schemas/BaseResponseSchema'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ErrorSchema'
          required:
            - data
          example:
            success: false
            data:
              object: "error"
              code: "server:internal_server_error"
              description: "Something went wrong on the server"
              messages: {"error_key":"error_reason"}
    # Schema for user response body
    UserResponseSchema:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/UserSchema'
        required:
          - data
        example:
          data:
            object: "user"
            id: "cec34607-0761-4a59-8357-18963e42a1aa"
            provider_user_id: "wijf-fbancomw-dqwjudb"
            username: "thibault@omise.co"
            metadata: {"first_name": "Thibault", "last_name": "Denizet"}
    # Schema for authentication token object
    AuthenticationTokenSchema:
      type: object
      properties:
        object:
          type: string
        authentication_token:
          type: string
      required:
        - object
        - authentication_token
    # Schema for individual balance object
    BalanceSchema:
      type: object
      properties:
        object:
          type: string
        minted_token:
          type: object
          $ref: '#/components/schemas/MintedTokenSchema'
        amount:
          type: number
      required:
        - object
        - minted_token
        - address
        - amount
      example:
        object: "balance"
        minted_token:
          object: 'minted_token'
          id: "MNT:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
          symbol: "MNT"
          name: "Mint"
          subunit_to_unit: 100000000000000000
        amount: 100
    # Schema for individual minted token object
    MintedTokenSchema:
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        symbol:
          type: string
        name:
          type: string
        subunit_to_unit:
          type: number
      required:
        - object
        - symbol
        - name
        - subunit_to_unit
      example:
        object: "minted_token"
        id: "MNT:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
        symbol: "MNT"
        name: "Mint"
        subunit_to_unit: 100000000000000000
    # Schema for authentication token body response
    AuthenticationTokenResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/AuthenticationTokenSchema'
        required:
          - data
        example:
          data:
            object: "authentication_token"
            authentication_token: "azJRj09l7jvR8KhTqUs3"
    # Schema for single balance body response
    BalanceResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/BalanceSchema'
        required:
          - data
        example:
          data:
            object: "balance"
            minted_token:
              object: 'minted_token'
              id: "MNT:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
              symbol: "MNT"
              name: "Mint"
              subunit_to_unit: 100000000000000000
            amount: 100
    # Schema for a single addresses body response (for credit / debit responses)
    SingleAddressesResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/UnpaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AddressResponse'
        required:
          - object
          - balances
          - address
        example:
          data:
            object: list
            data:
            - object: "address"
              address: "XXX123"
              balances:
              - amount: 100
                minted_token:
                  object: 'minted_token'
                  id: "MNT:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
                  symbol: "MNT"
                  name: "Mint"
                  subunit_to_unit: 100000000000000000
    # Schema for multiple addresses with one balance (transfer)
    MultipleAddressesResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/UnpaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AddressResponse'
        required:
          - object
          - balances
          - address
        example:
          data:
            object: list
            data:
            - object: "address"
              address: "XXX123"
              balances:
              - amount: 0
                minted_token:
                  object: 'minted_token'
                  id: "MNT:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
                  symbol: "MNT"
                  name: "Mint"
                  subunit_to_unit: 100000000000000000
            - object: "address"
              address: "XXX456"
              balances:
              - amount: 100
                minted_token:
                  object: 'minted_token'
                  id: "MNT:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
                  symbol: "MNT"
                  name: "Mint"
                  subunit_to_unit: 100000000000000000
    # Schema for addresses body response
    AddressesResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/UnpaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AddressResponse'
        required:
          - object
          - balances
          - address
        example:
          data:
            object: list
            data:
            - object: "address"
              address: "XXX123"
              balances:
              - amount: 100
                minted_token:
                  object: 'minted_token'
                  id: "MNT:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
                  symbol: "MNT"
                  name: "Mint"
                  subunit_to_unit: 100000000000000000
              - amount: 100
                minted_token:
                  object: 'minted_token'
                  id: "OMG:61822683-68d8-4af6-94d7-5ed4c34ecf1a"
                  symbol: "OMG"
                  name: "OmiseGO"
                  subunit_to_unit: 100000000000000000
            - object: "address"
              address: "XXX456"
              balances: []
    # Schema for single address body response
    AddressResponse:
      type: object
      properties:
        object:
          type: string
        balances:
          type: array
          $ref: '#/components/schemas/BalanceSchema'
        address:
          type: string
      required:
        - balances
        - address
      example:
        data:
          object: "address"
          balances: []
          address: "XXXXXXXXXXXXXXXXXXXXX"
    # Schema for settings response body
    SettingResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            properties:
              object:
                type: string
              minted_tokens:
                type: array
                items:
                 $ref: '#/components/schemas/MintedTokenSchema'
            required:
              - object
              - minted_tokens
        example:
          data:
            object: "setting"
            minted_tokens:
              - object: "minted_token"
                id: "MNT:61822683-68d8-4af6-94d7-5ed4c34ecf1a"
                symbol: "MNT"
                name: "Mint"
                subunit_to_unit: 100000000000000000
              - object: "minted_token"
                id: "OMG:5e9c0be5-15d1-4463-9ec2-02bc8ded7120"
                symbol: "OMG"
                name: "OmiseGO"
                subunit_to_unit: 100000000000000000
  requestBodies:
    # Body for a create / update user request
    UserBody:
      description: User object that needs to be created or updated
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              provider_user_id:
                type: string
              username:
                type: string
              metadata:
                type: object
            required:
              - provider_user_id
              - username
              - metadata
            example:
              provider_user_id: "wijf-fbancomw-dqwjudb"
              username: "thibault@omise.co"
              metadata: {"first_name": "Thibault", "last_name": "Denizet"}
    # Body containing the provider user id
    ProviderIdBody:
      description: The provider id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              provider_user_id:
                type: string
            required:
              - provider_user_id
            example:
              provider_user_id: "wijf-fbancomw-dqwjudb"
    # Body for a transfer
    TransferBody:
      description: Transfer the given amount of the associated minted token from the `from_address` to the `to_address`.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              from_address:
                type: string
              to_address:
                type: string
              token_id:
                type: string
              amount:
                type: integer
              metadata:
                type: object
            required:
              - from_address
              - to_address
              - token_id
              - amount
              - metadata
            example:
              from_address: "81e75f46-ee14-4e4c-a1e5-cddcb26dce9c"
              to_address: "4aa07691-2f99-4cb1-b36c-50763e2d2ba8"
              token_id: "MNT:61822683-68d8-4af6-94d7-5ed4c34ecf1a"
              amount: 100
              metadata: {}
    # Body for a credit / debit of a user's balance
    BalanceAdjustmentBody:
      description: Credit or debit the balance of the specified user by taking/giving back the given amount from/to the account_id. If not specified, the account owning the minted token will be used as the source. If no burn_balance_identifier is specified, the tokens won't be burned and will instead be returned to the primary balance of the selected account.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              provider_user_id:
                type: string
              token_id:
                type: string
              amount:
                type: integer
              account_id:
                type: string
              burn_balance_identifier:
                type: string
              metadata:
                type: object
            required:
              - provider_user_id
              - token_id
              - amount
              - metadata
            example:
              provider_user_id: "wijf-fbancomw-dqwjudb"
              token_id: "MNT:61822683-68d8-4af6-94d7-5ed4c34ecf1a"
              amount: 100
              account_id: "865ff420-899a-4eb3-8364-19edc5d51676"
              burn_balance_identifier: "burn"
  parameters:
    # Headers
    ServerAuthorizationHeader:
      in: header
      name: Authorization
      description: OMGServer Base64(access_key:secret_key)
      required: true
      schema:
        type: string
    ClientAuthorizationHeader:
      in: header
      name: Authorization
      description: OMGClient Base64(api_key:authentication_token)
      required: true
      schema:
        type: string
    IdempotencyToken:
      in: header
      name: Idempotency-Token
      description: The idempotency token for the request
      required: true
      schema:
        type: string
  securitySchemes:
    # Authentication for server calls
    ServerAuth:
      type: apiKey
      in: header
      name: Authorization
    # Authentication for client calls
    ClientAuth:
      type: apiKey
      in: header
      name: Authorization
  responses:
    # Empty
    EmptyResponse:
      description: Empty response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/BaseResponseSchema'
    # Response when there was an internal server error (should never happen)
    InternalServerError:
      description: Something went wrong on the server
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/ErrorResponseSchema'
    # User response
    UserResponse:
      description: User response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/UserResponseSchema'
    # Authentication token response
    AuthenticationTokenResponse:
      description: Authentication token response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AuthenticationTokenResponse'
    # Single Addresses response
    SingleAddressesResponse:
      description: Addresses response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/SingleAddressesResponse'
    # Multiple Addresses response
    MultipleAddressesResponse:
      description: Multiple Addresses response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/MultipleAddressesResponse'
    # Addresses response
    AddressesResponse:
      description: Addresses response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AddressesResponse'
    # Setting response
    SettingResponse:
      description: Setting response
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/SettingResponse'
