openapi: 3.0.0
info:
  version: "1.0.0"
  title: eWallet API
  description: >
    This is the documentation for eWallet API.


    Two kinds of endpoints can be found in this document: the server endpoints
    and the client (mobile wallet) endpoints.


    All API calls that modify the database need to be done from the server
    for security purposes, while retrieval calls can be made from the client
    (considered unsafe, 'never trust the client').


    Both server and client calls are authorized using the 'Authorization'
    HTTP header with the following format:


    - Server: `Authorization=OMGServer Base64(access_key:secret_key)`

    - Client: `Authorization=OMGClient Base64(api_key:authentication_token)`


    Due to HTTP-RPC nature, the API will always return a `200` HTTP status,
    including on errors. Only in case of an internal server error that `500`
    will be returned.


    Error codes are defined in [eWallet Error Codes](https://docs.google.com/a/omise.co/spreadsheets/d/1yq5IIoXQYV_ZlUVejAnhB8lVra2rxm56EnyjfMqFcU8/edit?usp=sharing).
  contact:
    name: OmiseGO
    email: mederic@omise.co
  license:
    name: License To define
    url: 'https://omg.omise.co/'

tags:
  - name: Session
    description: Resources related to session tokens.
  - name: User
    description: Resources related to users. A user is an entity uniquely identified by its provider_user_id which is the user id in the provider database.
  - name: Balance
    description: Resources related to balances of a specific user. Balances are the representation of the amount of each token a user owns.
  - name: Setting
    description: Resources related to global settings of the wallet.
  - name: TransactionRequest
    description: Resources related to the creation of transaction requests (either receiving or sending) that needs to be consumed by another user.

servers:
  - url: /api

paths:
  ######################################
  #          SESSION ENDPOINTS         #
  ######################################
  /login:
    post:
      tags:
        - Session
      summary: Server - Login an existing user. The provider can call this to get an authentication token for a specific user.
      operationId: login
      security:
        - ServerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ProviderIdBody'
      responses:
        '200':
          $ref: "#/components/responses/AuthenticationTokenResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /logout:
    post:
      tags:
        - Session
      summary: Client - Expires a user's authentication_token.
      operationId: logout
      security:
        - ClientAuth: []
      responses:
        '200':
          $ref: "#/components/responses/EmptyResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  ######################################
  #            USER ENDPOINTS          #
  ######################################
  /user.create:
    post:
      tags:
        - User
      summary: Server - Create a new user
      operationId: user_create
      security:
        - ServerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      parameters:
        - $ref: "#/components/parameters/IdempotencyToken"
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /user.update:
    post:
      tags:
        - User
      summary: Server - Update an existing user
      operationId: user_update
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdempotencyToken"
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /user.get:
    post:
      tags:
        - User
      summary: Server - Get an existing user. The provider can call this to get any user from its id.
      operationId: user_get
      security:
        - ServerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ProviderIdBody'
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /me.get:
    post:
      tags:
        - User
      summary: Client - Get the user corresponding to the provided authentication token.
      operationId: me_get
      security:
        - ClientAuth: []
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  ######################################
  #          BALANCE ENDPOINTS         #
  ######################################
  /user.list_balances:
    post:
      tags:
        - Balance
      summary: Server - Get the balances of a user. The provider can call this to get the balances of any user from its id.
      operationId: user_list_balances
      security:
        - ServerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ProviderIdBody'
      responses:
        '200':
          $ref: "#/components/responses/AddressesResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /me.list_balances:
    post:
      tags:
        - Balance
      summary: Client - Get the balances of a specific user. The client can call this to get the balances of the user corresponding to the authentication_token provided.
      operationId: me_list_balances
      security:
        - ClientAuth: []
      responses:
        '200':
          $ref: "#/components/responses/AddressesResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /user.credit_balance:
    post:
      tags:
        - Balance
      summary: Server - Credit the balance of a user. The provider can call this to credit the balance of an existing user corresponding to the provider_user_id provided.
      operationId: user_credit_balance
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdempotencyToken"
      requestBody:
        $ref: '#/components/requestBodies/BalanceAdjustmentBody'
      responses:
        '200':
          $ref: "#/components/responses/SingleAddressesResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /user.debit_balance:
    post:
      tags:
        - Balance
      summary: Server - Debit the balance of a user. The provider can call this to debit the balance of an existing user corresponding to the provider_user_id provided.
      operationId: user_debit_balance
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdempotencyToken"
      requestBody:
        $ref: '#/components/requestBodies/BalanceAdjustmentBody'
      responses:
        '200':
          $ref: "#/components/responses/SingleAddressesResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /transfer:
    post:
      tags:
        - Balance
      summary: Server - Transfer the specified amount between two balances.
      operationId: transfer
      security:
        - ServerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdempotencyToken"
      requestBody:
        $ref: '#/components/requestBodies/TransferBody'
      responses:
        '200':
          $ref: "#/components/responses/MultipleAddressesResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

  ######################################
  #          SETTINGS ENDPOINTS        #
  ######################################
  /get_settings:
    post:
      tags:
        - Setting
      summary: Server - Get the global settings.
      operationId: get_settings
      security:
        - ServerAuth: []
      responses:
        '200':
          $ref: "#/components/responses/SettingResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /me.get_settings:
    post:
      tags:
        - Setting
      summary: Client - Get the global settings.
      operationId: me_get_settings
      security:
        - ClientAuth: []
      responses:
        '200':
          $ref: "#/components/responses/SettingResponse"
        '500':
          $ref: "#/components/responses/InternalServerError"

# Components are objects that are reusable within this API spec.
# They do not have any effect on the API unless they are
# referenced from properties outside the component.
components:
  schemas:
    ######################################
    #             BASE SCHEMAS           #
    ######################################
    BaseResponseSchema:
      description: "The response schema for a successful operation"
      type: object
      properties:
        version:
          type: string
        success:
          type: boolean
        data:
          type: object
      required:
        - version
        - success
        - data
      example:
        version: "1"
        success: true
        data: {}
    UnpaginatedListSchema:
      description: "The object schema for an unpaginated list"
      type: object
      properties:
        object:
          type: string
        data:
          type: array
      required:
        - object
        - data
      example:
        object: list

    ######################################
    #            ERROR SCHEMAS           #
    ######################################
    ErrorSchema:
      description: "The object schema for an error"
      type: object
      properties:
        object:
          type: string
        code:
          type: string
        description:
          type: string
        messages:
          type: object
      required:
        - object
        - code
        - description
        - messages
      example:
        object: "error"
        code: "server:internal_server_error"
        description: "Something went wrong on the server"
        messages: {"error_key": "error_reason"}
    ErrorResponseSchema:
      description: "The response schema for an error"
      allOf:
        - $ref: '#/components/schemas/BaseResponseSchema'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ErrorSchema'
          required:
            - data
          example:
            success: false
            data:
              object: "error"
              code: "server:internal_server_error"
              description: "Something went wrong on the server"
              messages: {"error_key":"error_reason"}

    ######################################
    #          AUTH TOKEN SCHEMAS        #
    ######################################
    AuthenticationTokenSchema:
      description: "The object schema for an authentication token"
      type: object
      properties:
        object:
          type: string
        authentication_token:
          type: string
      required:
        - object
        - authentication_token
    AuthenticationTokenResponse:
      description: "The response schema for an authentication token"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/AuthenticationTokenSchema'
        required:
          - data
        example:
          data:
            object: "authentication_token"
            authentication_token: "azJRj09l7jvR8KhTqUs3"

    ######################################
    #             USER SCHEMAS           #
    ######################################
    UserSchema:
      description: "The object schema for a user"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        username:
          type: string
        provider_user_id:
          type: string
        metadata:
          type: object
      required:
        - object
        - id
        - username
        - provider_user_id
        - metadata
      example:
        object: "user"
        id: "cec34607-0761-4a59-8357-18963e42a1aa"
        provider_user_id: "wijf-fbancomw-dqwjudb"
        username: "thibault@omise.co"
        metadata: {"first_name": "Thibault", "last_name": "Denizet"}
    UserResponseSchema:
      description: "The response schema for a user"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/UserSchema'
        required:
          - data
        example:
          data:
            object: "user"
            id: "cec34607-0761-4a59-8357-18963e42a1aa"
            provider_user_id: "wijf-fbancomw-dqwjudb"
            username: "thibault@omise.co"
            metadata: {"first_name": "Thibault", "last_name": "Denizet"}

    ######################################
    #            BALANCE SCHEMAS         #
    ######################################
    BalanceSchema:
      description: "The object schema for a balance"
      type: object
      properties:
        object:
          type: string
        minted_token:
          type: object
          $ref: '#/components/schemas/MintedTokenSchema'
        amount:
          type: number
      required:
        - object
        - minted_token
        - address
        - amount
      example:
        object: "balance"
        minted_token:
          object: 'minted_token'
          id: "BTC:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
          symbol: "BTC"
          name: "Bitcoin"
          subunit_to_unit: 100000000000000000
        amount: 100
    BalanceResponse:
      description: "The response schema for a balance"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            $ref: '#/components/schemas/BalanceSchema'
        required:
          - data
        example:
          data:
            object: "balance"
            minted_token:
              object: 'minted_token'
              id: "BTC:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
              symbol: "BTC"
              name: "Bitcoin"
              subunit_to_unit: 100000000000000000
            amount: 100
    AddressResponse:
      description: "The object schema for an address"
      type: object
      properties:
        object:
          type: string
        balances:
          type: array
          $ref: '#/components/schemas/BalanceSchema'
        address:
          type: string
      required:
        - balances
        - address
      example:
        data:
          object: "address"
          balances: []
          address: "XXXXXXXXXXXXXXXXXXXXX"
    SingleAddressesResponse:
      description: "The response schema for a list with a single address"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/UnpaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AddressResponse'
        required:
          - object
          - balances
          - address
        example:
          data:
            object: list
            data:
            - object: "address"
              address: "XXX123"
              balances:
              - amount: 100
                minted_token:
                  object: 'minted_token'
                  id: "BTC:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
                  symbol: "BTC"
                  name: "Bitcoin"
                  subunit_to_unit: 100000000000000000
    MultipleAddressesResponse:
      description: "The response schema for a list of multiple addresses (i.e. transfers)"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/UnpaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AddressResponse'
        required:
          - object
          - balances
          - address
        example:
          data:
            object: list
            data:
            - object: "address"
              address: "XXX123"
              balances:
              - amount: 0
                minted_token:
                  object: 'minted_token'
                  id: "BTC:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
                  symbol: "BTC"
                  name: "Bitcoin"
                  subunit_to_unit: 100000000000000000
            - object: "address"
              address: "XXX456"
              balances:
              - amount: 100
                minted_token:
                  object: 'minted_token'
                  id: "BTC:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
                  symbol: "BTC"
                  name: "Bitcoin"
                  subunit_to_unit: 100000000000000000
    AddressesResponse:
      description: "The response schema for a list of addresses"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            allOf:
              - $ref: '#/components/schemas/UnpaginatedListSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AddressResponse'
        required:
          - object
          - balances
          - address
        example:
          data:
            object: list
            data:
            - object: "address"
              address: "XXX123"
              balances:
              - amount: 100
                minted_token:
                  object: 'minted_token'
                  id: "BTC:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
                  symbol: "BTC"
                  name: "Bitcoin"
                  subunit_to_unit: 100000000000000000
              - amount: 100
                minted_token:
                  object: 'minted_token'
                  id: "OMG:61822683-68d8-4af6-94d7-5ed4c34ecf1a"
                  symbol: "OMG"
                  name: "OmiseGO"
                  subunit_to_unit: 100000000000000000
            - object: "address"
              address: "XXX456"
              balances: []

    ######################################
    #         MINTED TOKEN SCHEMAS       #
    ######################################
    MintedTokenSchema:
      description: "The object schema for a minted token"
      type: object
      properties:
        object:
          type: string
        id:
          type: string
        symbol:
          type: string
        name:
          type: string
        subunit_to_unit:
          type: number
      required:
        - object
        - symbol
        - name
        - subunit_to_unit
      example:
        object: "minted_token"
        id: "MNT:bcb3d05f-00b2-4687-97b9-1b4c9484b641"
        symbol: "MNT"
        name: "Mint"
        subunit_to_unit: 100000000000000000

    ######################################
    #           SETTING SCHEMAS          #
    ######################################
    SettingResponse:
      description: "The response schema for settings"
      allOf:
      - $ref: '#/components/schemas/BaseResponseSchema'
      - type: object
        properties:
          data:
            type: object
            properties:
              object:
                type: string
              minted_tokens:
                type: array
                items:
                 $ref: '#/components/schemas/MintedTokenSchema'
            required:
              - object
              - minted_tokens
        example:
          data:
            object: "setting"
            minted_tokens:
              - object: "minted_token"
                id: "BTC:61822683-68d8-4af6-94d7-5ed4c34ecf1a"
                symbol: "BTC"
                name: "Bitcoin"
                subunit_to_unit: 100000000000000000
              - object: "minted_token"
                id: "OMG:5e9c0be5-15d1-4463-9ec2-02bc8ded7120"
                symbol: "OMG"
                name: "OmiseGO"
                subunit_to_unit: 100000000000000000

  requestBodies:
    ######################################
    #         USER REQUEST BODIES        #
    ######################################
    UserBody:
      description: The parameters to use for creating or updating a user
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              provider_user_id:
                type: string
              username:
                type: string
              metadata:
                type: object
            required:
              - provider_user_id
              - username
              - metadata
            example:
              provider_user_id: "wijf-fbancomw-dqwjudb"
              username: "thibault@omise.co"
              metadata: {"first_name": "Thibault", "last_name": "Denizet"}
    ProviderIdBody:
      description: The parameters to use for providing a provider user id
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              provider_user_id:
                type: string
            required:
              - provider_user_id
            example:
              provider_user_id: "wijf-fbancomw-dqwjudb"

    ######################################
    #       TRANSFER REQUEST BODIES      #
    ######################################
    TransferBody:
      description: The parameters for making a transfer from an address to another.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              from_address:
                type: string
              to_address:
                type: string
              token_id:
                type: string
              amount:
                type: integer
              metadata:
                type: object
            required:
              - from_address
              - to_address
              - token_id
              - amount
              - metadata
            example:
              from_address: "81e75f46-ee14-4e4c-a1e5-cddcb26dce9c"
              to_address: "4aa07691-2f99-4cb1-b36c-50763e2d2ba8"
              token_id: "BTC:61822683-68d8-4af6-94d7-5ed4c34ecf1a"
              amount: 100
              metadata: {}
    BalanceAdjustmentBody:
      description: |
        The parameters for crediting or debiting the balance of the specified user
        by taking/giving back the given amount from/to the account_id.

        If not specified, the account owning the minted token will be used as the source.
        If no burn_balance_identifier is specified, the tokens won't be burned
        and will instead be returned to the primary balance of the selected account.
      required: true
      content:
        application/vnd.omisego.v1+json:
          schema:
            properties:
              provider_user_id:
                type: string
              token_id:
                type: string
              amount:
                type: integer
              account_id:
                type: string
              burn_balance_identifier:
                type: string
              metadata:
                type: object
            required:
              - provider_user_id
              - token_id
              - amount
              - metadata
            example:
              provider_user_id: "wijf-fbancomw-dqwjudb"
              token_id: "BTC:61822683-68d8-4af6-94d7-5ed4c34ecf1a"
              amount: 100
              account_id: "865ff420-899a-4eb3-8364-19edc5d51676"
              burn_balance_identifier: "burn"

  ######################################
  #           REQUEST HEADERS          #
  ######################################
  parameters:
    IdempotencyToken:
      in: header
      name: Idempotency-Token
      description: The idempotency token for the request
      required: true
      schema:
        type: string

  ######################################
  #          SECURITY SCHEMES          #
  ######################################
  securitySchemes:
    ServerAuth:
      type: apiKey
      in: header
      name: Authorization
      description: OMGServer Base64(access_key:secret_key)
    ClientAuth:
      type: apiKey
      in: header
      name: Authorization
      description: OMGClient Base64(api_key:authentication_token)

  responses:
    ######################################
    #          SESSION RESPONSES         #
    ######################################
    AuthenticationTokenResponse:
      description: "Returns a single authentication token"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AuthenticationTokenResponse'

    ######################################
    #            USER RESPONSES          #
    ######################################
    UserResponse:
      description: "Returns a single user"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/UserResponseSchema'

    ######################################
    #          BALANCE RESPONSES         #
    ######################################
    SingleAddressesResponse:
      description: "Returns a list of single addresses"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/SingleAddressesResponse'
    MultipleAddressesResponse:
      description: "Returns a list of multiple addresses"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/MultipleAddressesResponse'
    AddressesResponse:
      description: "Returns a list of addresses"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/AddressesResponse'

    ######################################
    #          SETTING RESPONSES         #
    ######################################
    SettingResponse:
      description: "Returns a list of settings"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/SettingResponse'

    ######################################
    #       MISCELLANEOUS RESPONSES      #
    ######################################
    EmptyResponse:
      description: "Returns an empty response"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/BaseResponseSchema'
    InternalServerError:
      description: "Returns an internal server error"
      content:
        application/vnd.omisego.v1+json:
          schema:
            $ref: '#/components/schemas/ErrorResponseSchema'
